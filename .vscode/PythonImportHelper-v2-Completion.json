[
    {
        "label": "ckeditor.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ckeditor.fields",
        "description": "ckeditor.fields",
        "detail": "ckeditor.fields",
        "documentation": {
            "value": "\n```python\nimport ckeditor.fields\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "RichTextFormField",
        "importPath": "ckeditor.fields",
        "description": "ckeditor.fields",
        "isExtraImport": true,
        "detail": "ckeditor.fields",
        "documentation": {
            "value": "\n```python\nimport ckeditor.fields\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "RichTextField",
        "importPath": "ckeditor.fields",
        "description": "ckeditor.fields",
        "isExtraImport": true,
        "detail": "ckeditor.fields",
        "documentation": {
            "value": "\n```python\nimport ckeditor.fields\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "RichTextFormField",
        "importPath": "ckeditor.fields",
        "description": "ckeditor.fields",
        "isExtraImport": true,
        "detail": "ckeditor.fields",
        "documentation": {
            "value": "\n```python\nimport ckeditor.fields\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "RichTextField",
        "importPath": "ckeditor.fields",
        "description": "ckeditor.fields",
        "isExtraImport": true,
        "detail": "ckeditor.fields",
        "documentation": {
            "value": "\n```python\nimport ckeditor.fields\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "RichTextField",
        "importPath": "ckeditor.fields",
        "description": "ckeditor.fields",
        "isExtraImport": true,
        "detail": "ckeditor.fields",
        "documentation": {
            "value": "\n```python\nimport ckeditor.fields\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {
            "value": "\n```python\nimport django.db.models.deletion\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "django.utils.timezone",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.utils.timezone",
        "description": "django.utils.timezone",
        "detail": "django.utils.timezone",
        "documentation": {
            "value": "\n```python\nimport django.utils.timezone\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {
            "value": "\n```python\nimport django.conf\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {
            "value": "\n```python\nimport django.conf\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {
            "value": "\n```python\nimport django.conf\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {
            "value": "\n```python\nimport django.conf\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {
            "value": "\n```python\nimport django.conf\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {
            "value": "\n```python\nimport django.conf\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {
            "value": "\n```python\nimport django.conf\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {
            "value": "\n```python\nimport django.conf\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "settings",
        "importPath": "django.conf",
        "description": "django.conf",
        "isExtraImport": true,
        "detail": "django.conf",
        "documentation": {
            "value": "\n```python\nimport django.conf\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {
            "value": "\n```python\nimport django.db\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "django_ckeditor_5.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django_ckeditor_5.fields",
        "description": "django_ckeditor_5.fields",
        "detail": "django_ckeditor_5.fields",
        "documentation": {
            "value": "\n```python\nimport django_ckeditor_5.fields\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ckeditor_uploader.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ckeditor_uploader.fields",
        "description": "ckeditor_uploader.fields",
        "detail": "ckeditor_uploader.fields",
        "documentation": {
            "value": "\n```python\nimport ckeditor_uploader.fields\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "taggit.managers",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "taggit.managers",
        "description": "taggit.managers",
        "detail": "taggit.managers",
        "documentation": {
            "value": "\n```python\nimport taggit.managers\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TaggableManager",
        "importPath": "taggit.managers",
        "description": "taggit.managers",
        "isExtraImport": true,
        "detail": "taggit.managers",
        "documentation": {
            "value": "\n```python\nimport taggit.managers\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "embed_video.fields",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "embed_video.fields",
        "description": "embed_video.fields",
        "detail": "embed_video.fields",
        "documentation": {
            "value": "\n```python\nimport embed_video.fields\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EmbedVideoField",
        "importPath": "embed_video.fields",
        "description": "embed_video.fields",
        "isExtraImport": true,
        "detail": "embed_video.fields",
        "documentation": {
            "value": "\n```python\nimport embed_video.fields\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {
            "value": "\n```python\nimport django.contrib\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {
            "value": "\n```python\nimport django.contrib\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {
            "value": "\n```python\nimport django.contrib\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {
            "value": "\n```python\nimport django.contrib\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {
            "value": "\n```python\nimport django.contrib\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {
            "value": "\n```python\nimport django.contrib\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "messages",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {
            "value": "\n```python\nimport django.contrib\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {
            "value": "\n```python\nimport django.apps\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {
            "value": "\n```python\nimport django.apps\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {
            "value": "\n```python\nimport django.apps\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {
            "value": "\n```python\nimport django\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {
            "value": "\n```python\nimport django\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {
            "value": "\n```python\nimport django\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "forms",
        "importPath": "django",
        "description": "django",
        "isExtraImport": true,
        "detail": "django",
        "documentation": {
            "value": "\n```python\nimport django\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CKEditorWidget",
        "importPath": "ckeditor.widgets",
        "description": "ckeditor.widgets",
        "isExtraImport": true,
        "detail": "ckeditor.widgets",
        "documentation": {
            "value": "\n```python\nimport ckeditor.widgets\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {
            "value": "\n```python\nimport django.contrib.auth\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {
            "value": "\n```python\nimport django.contrib.auth\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {
            "value": "\n```python\nimport django.contrib.auth\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_user_model",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {
            "value": "\n```python\nimport django.contrib.auth\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "views",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {
            "value": "\n```python\nimport django.contrib.auth\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "authenticate",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {
            "value": "\n```python\nimport django.contrib.auth\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "login",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {
            "value": "\n```python\nimport django.contrib.auth\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "logout",
        "importPath": "django.contrib.auth",
        "description": "django.contrib.auth",
        "isExtraImport": true,
        "detail": "django.contrib.auth",
        "documentation": {
            "value": "\n```python\nimport django.contrib.auth\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "User",
        "importPath": "users.models",
        "description": "users.models",
        "isExtraImport": true,
        "detail": "users.models",
        "documentation": {
            "value": "\n```python\nimport users.models\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {
            "value": "\n```python\nimport django.utils.text\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {
            "value": "\n```python\nimport django.utils.text\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {
            "value": "\n```python\nimport django.utils.text\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {
            "value": "\n```python\nimport django.utils.text\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "slugify",
        "importPath": "django.utils.text",
        "description": "django.utils.text",
        "isExtraImport": true,
        "detail": "django.utils.text",
        "documentation": {
            "value": "\n```python\nimport django.utils.text\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {
            "value": "\n```python\nimport PIL\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Image",
        "importPath": "PIL",
        "description": "PIL",
        "isExtraImport": true,
        "detail": "PIL",
        "documentation": {
            "value": "\n```python\nimport PIL\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cv2",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cv2",
        "description": "cv2",
        "detail": "cv2",
        "documentation": {
            "value": "\n```python\nimport cv2\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pre_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {
            "value": "\n```python\nimport django.db.models.signals\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pre_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {
            "value": "\n```python\nimport django.db.models.signals\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "pre_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {
            "value": "\n```python\nimport django.db.models.signals\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "post_save",
        "importPath": "django.db.models.signals",
        "description": "django.db.models.signals",
        "isExtraImport": true,
        "detail": "django.db.models.signals",
        "documentation": {
            "value": "\n```python\nimport django.db.models.signals\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {
            "value": "\n```python\nimport django.dispatch\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "receiver",
        "importPath": "django.dispatch",
        "description": "django.dispatch",
        "isExtraImport": true,
        "detail": "django.dispatch",
        "documentation": {
            "value": "\n```python\nimport django.dispatch\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "reverse",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {
            "value": "\n```python\nimport django.urls\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {
            "value": "\n```python\nimport django.urls\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {
            "value": "\n```python\nimport django.urls\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "reverse_lazy",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {
            "value": "\n```python\nimport django.urls\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {
            "value": "\n```python\nimport django.urls\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {
            "value": "\n```python\nimport django.urls\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {
            "value": "\n```python\nimport django.urls\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {
            "value": "\n```python\nimport django.urls\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {
            "value": "\n```python\nimport django.utils\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {
            "value": "\n```python\nimport django.test\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {
            "value": "\n```python\nimport django.test\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {
            "value": "\n```python\nimport django.test\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {
            "value": "\n```python\nimport django.shortcuts\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_object_or_404",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {
            "value": "\n```python\nimport django.shortcuts\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {
            "value": "\n```python\nimport django.shortcuts\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {
            "value": "\n```python\nimport django.shortcuts\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {
            "value": "\n```python\nimport django.shortcuts\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {
            "value": "\n```python\nimport django.shortcuts\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {
            "value": "\n```python\nimport django.shortcuts\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {
            "value": "\n```python\nimport django.shortcuts\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "redirect",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {
            "value": "\n```python\nimport django.shortcuts\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic.list",
        "description": "django.views.generic.list",
        "isExtraImport": true,
        "detail": "django.views.generic.list",
        "documentation": {
            "value": "\n```python\nimport django.views.generic.list\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic.list",
        "description": "django.views.generic.list",
        "isExtraImport": true,
        "detail": "django.views.generic.list",
        "documentation": {
            "value": "\n```python\nimport django.views.generic.list\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TemplateResponseMixin",
        "importPath": "django.views.generic.base",
        "description": "django.views.generic.base",
        "isExtraImport": true,
        "detail": "django.views.generic.base",
        "documentation": {
            "value": "\n```python\nimport django.views.generic.base\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SearchQuery",
        "importPath": "django.contrib.postgres.search",
        "description": "django.contrib.postgres.search",
        "isExtraImport": true,
        "detail": "django.contrib.postgres.search",
        "documentation": {
            "value": "\n```python\nimport django.contrib.postgres.search\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SearchVector",
        "importPath": "django.contrib.postgres.search",
        "description": "django.contrib.postgres.search",
        "isExtraImport": true,
        "detail": "django.contrib.postgres.search",
        "documentation": {
            "value": "\n```python\nimport django.contrib.postgres.search\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SearchHeadline",
        "importPath": "django.contrib.postgres.search",
        "description": "django.contrib.postgres.search",
        "isExtraImport": true,
        "detail": "django.contrib.postgres.search",
        "documentation": {
            "value": "\n```python\nimport django.contrib.postgres.search\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SearchRank",
        "importPath": "django.contrib.postgres.search",
        "description": "django.contrib.postgres.search",
        "isExtraImport": true,
        "detail": "django.contrib.postgres.search",
        "documentation": {
            "value": "\n```python\nimport django.contrib.postgres.search\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TrigramSimilarity",
        "importPath": "django.contrib.postgres.search",
        "description": "django.contrib.postgres.search",
        "isExtraImport": true,
        "detail": "django.contrib.postgres.search",
        "documentation": {
            "value": "\n```python\nimport django.contrib.postgres.search\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SearchVector",
        "importPath": "django.contrib.postgres.search",
        "description": "django.contrib.postgres.search",
        "isExtraImport": true,
        "detail": "django.contrib.postgres.search",
        "documentation": {
            "value": "\n```python\nimport django.contrib.postgres.search\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SearchVector",
        "importPath": "django.contrib.postgres.search",
        "description": "django.contrib.postgres.search",
        "isExtraImport": true,
        "detail": "django.contrib.postgres.search",
        "documentation": {
            "value": "\n```python\nimport django.contrib.postgres.search\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Tag",
        "importPath": "taggit.models",
        "description": "taggit.models",
        "isExtraImport": true,
        "detail": "taggit.models",
        "documentation": {
            "value": "\n```python\nimport taggit.models\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FormView",
        "importPath": "django.views.generic.edit",
        "description": "django.views.generic.edit",
        "isExtraImport": true,
        "detail": "django.views.generic.edit",
        "documentation": {
            "value": "\n```python\nimport django.views.generic.edit\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FormView",
        "importPath": "django.views.generic.edit",
        "description": "django.views.generic.edit",
        "isExtraImport": true,
        "detail": "django.views.generic.edit",
        "documentation": {
            "value": "\n```python\nimport django.views.generic.edit\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CreateView",
        "importPath": "django.views.generic.edit",
        "description": "django.views.generic.edit",
        "isExtraImport": true,
        "detail": "django.views.generic.edit",
        "documentation": {
            "value": "\n```python\nimport django.views.generic.edit\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "UpdateView",
        "importPath": "django.views.generic.edit",
        "description": "django.views.generic.edit",
        "isExtraImport": true,
        "detail": "django.views.generic.edit",
        "documentation": {
            "value": "\n```python\nimport django.views.generic.edit\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DeleteView",
        "importPath": "django.views.generic.edit",
        "description": "django.views.generic.edit",
        "isExtraImport": true,
        "detail": "django.views.generic.edit",
        "documentation": {
            "value": "\n```python\nimport django.views.generic.edit\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ListView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {
            "value": "\n```python\nimport django.views.generic\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "FormView",
        "importPath": "django.views.generic",
        "description": "django.views.generic",
        "isExtraImport": true,
        "detail": "django.views.generic",
        "documentation": {
            "value": "\n```python\nimport django.views.generic\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LoginRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {
            "value": "\n```python\nimport django.contrib.auth.mixins\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PermissionRequiredMixin",
        "importPath": "django.contrib.auth.mixins",
        "description": "django.contrib.auth.mixins",
        "isExtraImport": true,
        "detail": "django.contrib.auth.mixins",
        "documentation": {
            "value": "\n```python\nimport django.contrib.auth.mixins\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "cache_control",
        "importPath": "django.views.decorators.cache",
        "description": "django.views.decorators.cache",
        "isExtraImport": true,
        "detail": "django.views.decorators.cache",
        "documentation": {
            "value": "\n```python\nimport django.views.decorators.cache\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Count",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {
            "value": "\n```python\nimport django.db.models\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "View",
        "importPath": "django.views",
        "description": "django.views",
        "isExtraImport": true,
        "detail": "django.views",
        "documentation": {
            "value": "\n```python\nimport django.views\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Paginator",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {
            "value": "\n```python\nimport django.core.paginator\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EmptyPage",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {
            "value": "\n```python\nimport django.core.paginator\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PageNotAnInteger",
        "importPath": "django.core.paginator",
        "description": "django.core.paginator",
        "isExtraImport": true,
        "detail": "django.core.paginator",
        "documentation": {
            "value": "\n```python\nimport django.core.paginator\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "require_POST",
        "importPath": "django.views.decorators.http",
        "description": "django.views.decorators.http",
        "isExtraImport": true,
        "detail": "django.views.decorators.http",
        "documentation": {
            "value": "\n```python\nimport django.views.decorators.http\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "require_POST",
        "importPath": "django.views.decorators.http",
        "description": "django.views.decorators.http",
        "isExtraImport": true,
        "detail": "django.views.decorators.http",
        "documentation": {
            "value": "\n```python\nimport django.views.decorators.http\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {
            "value": "\n```python\nimport django.contrib.auth.decorators\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "permission_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {
            "value": "\n```python\nimport django.contrib.auth.decorators\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "login_required",
        "importPath": "django.contrib.auth.decorators",
        "description": "django.contrib.auth.decorators",
        "isExtraImport": true,
        "detail": "django.contrib.auth.decorators",
        "documentation": {
            "value": "\n```python\nimport django.contrib.auth.decorators\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Group",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {
            "value": "\n```python\nimport django.contrib.auth.models\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AbstractBaseUser",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {
            "value": "\n```python\nimport django.contrib.auth.models\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BaseUserManager",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {
            "value": "\n```python\nimport django.contrib.auth.models\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PermissionsMixin",
        "importPath": "django.contrib.auth.models",
        "description": "django.contrib.auth.models",
        "isExtraImport": true,
        "detail": "django.contrib.auth.models",
        "documentation": {
            "value": "\n```python\nimport django.contrib.auth.models\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {
            "value": "\n```python\nimport django.core.mail\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "send_mail",
        "importPath": "django.core.mail",
        "description": "django.core.mail",
        "isExtraImport": true,
        "detail": "django.core.mail",
        "documentation": {
            "value": "\n```python\nimport django.core.mail\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "render_to_string",
        "importPath": "django.template.loader",
        "description": "django.template.loader",
        "isExtraImport": true,
        "detail": "django.template.loader",
        "documentation": {
            "value": "\n```python\nimport django.template.loader\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {
            "value": "\n```python\nimport os\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {
            "value": "\n```python\nimport django.core.asgi\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {
            "value": "\n```python\nimport pathlib\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {
            "value": "\n```python\nimport dotenv\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "constants",
        "importPath": "django.contrib.messages",
        "description": "django.contrib.messages",
        "isExtraImport": true,
        "detail": "django.contrib.messages",
        "documentation": {
            "value": "\n```python\nimport django.contrib.messages\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "dj_database_url",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dj_database_url",
        "description": "dj_database_url",
        "detail": "dj_database_url",
        "documentation": {
            "value": "\n```python\nimport dj_database_url\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "static",
        "importPath": "django.conf.urls.static",
        "description": "django.conf.urls.static",
        "isExtraImport": true,
        "detail": "django.conf.urls.static",
        "documentation": {
            "value": "\n```python\nimport django.conf.urls.static\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {
            "value": "\n```python\nimport django.core.wsgi\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {
            "value": "\n```python\nimport uuid\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ValidationError",
        "importPath": "django.core.exceptions",
        "description": "django.core.exceptions",
        "isExtraImport": true,
        "detail": "django.core.exceptions",
        "documentation": {
            "value": "\n```python\nimport django.core.exceptions\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {
            "value": "\n```python\nimport sys\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "news.migrations.0001_initial",
        "description": "news.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "news.migrations.0001_initial",
        "documentation": {
            "value": "\n```python\nfrom news.migrations.0001_initial import Migration\n```\n\n```python\n\n\n```\n\n```python\nclass Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Category',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "news.migrations.0002_post_active",
        "description": "news.migrations.0002_post_active",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='post',\n            name='active',\n            field=models.BooleanField(default=True),\n        ),",
        "detail": "news.migrations.0002_post_active",
        "documentation": {
            "value": "\n```python\nfrom news.migrations.0002_post_active import Migration\n```\n\n```python\n\n\n```\n\n```python\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='post',\n            name='active',\n            field=models.BooleanField(default=True),\n        ),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "news.migrations.0003_alter_category_options_alter_author_user",
        "description": "news.migrations.0003_alter_category_options_alter_author_user",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0002_post_active'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='category',\n            options={'ordering': ['-created'], 'verbose_name': 'category', 'verbose_name_plural': 'categories'},\n        ),",
        "detail": "news.migrations.0003_alter_category_options_alter_author_user",
        "documentation": {
            "value": "\n```python\nfrom news.migrations.0003_alter_category_options_alter_author_user import Migration\n```\n\n```python\n\n\n```\n\n```python\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0002_post_active'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AlterModelOptions(\n            name='category',\n            options={'ordering': ['-created'], 'verbose_name': 'category', 'verbose_name_plural': 'categories'},\n        ),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "news.migrations.0004_alter_post_text",
        "description": "news.migrations.0004_alter_post_text",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0003_alter_category_options_alter_author_user'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='post',\n            name='text',\n            field=django_ckeditor_5.fields.CKEditor5Field(verbose_name='Text'),\n        ),",
        "detail": "news.migrations.0004_alter_post_text",
        "documentation": {
            "value": "\n```python\nfrom news.migrations.0004_alter_post_text import Migration\n```\n\n```python\n\n\n```\n\n```python\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0003_alter_category_options_alter_author_user'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='post',\n            name='text',\n            field=django_ckeditor_5.fields.CKEditor5Field(verbose_name='Text'),\n        ),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "news.migrations.0005_alter_post_text",
        "description": "news.migrations.0005_alter_post_text",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0004_alter_post_text'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='post',\n            name='text',\n            field=ckeditor_uploader.fields.RichTextUploadingField(),\n        ),",
        "detail": "news.migrations.0005_alter_post_text",
        "documentation": {
            "value": "\n```python\nfrom news.migrations.0005_alter_post_text import Migration\n```\n\n```python\n\n\n```\n\n```python\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0004_alter_post_text'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='post',\n            name='text',\n            field=ckeditor_uploader.fields.RichTextUploadingField(),\n        ),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "news.migrations.0006_alter_post_text",
        "description": "news.migrations.0006_alter_post_text",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0005_alter_post_text'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='post',\n            name='text',\n            field=ckeditor.fields.RichTextField(),\n        ),",
        "detail": "news.migrations.0006_alter_post_text",
        "documentation": {
            "value": "\n```python\nfrom news.migrations.0006_alter_post_text import Migration\n```\n\n```python\n\n\n```\n\n```python\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0005_alter_post_text'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='post',\n            name='text',\n            field=ckeditor.fields.RichTextField(),\n        ),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "news.migrations.0007_post_tags",
        "description": "news.migrations.0007_post_tags",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0006_alter_post_text'),\n        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='post',\n            name='tags',\n            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),",
        "detail": "news.migrations.0007_post_tags",
        "documentation": {
            "value": "\n```python\nfrom news.migrations.0007_post_tags import Migration\n```\n\n```python\n\n\n```\n\n```python\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0006_alter_post_text'),\n        ('taggit', '0006_rename_taggeditem_content_type_object_id_taggit_tagg_content_8fc721_idx'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='post',\n            name='tags',\n            field=taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='taggit.TaggedItem', to='taggit.Tag', verbose_name='Tags'),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "news.migrations.0008_rename_video_post_videos",
        "description": "news.migrations.0008_rename_video_post_videos",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0007_post_tags'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='post',\n            old_name='video',\n            new_name='videos',\n        ),",
        "detail": "news.migrations.0008_rename_video_post_videos",
        "documentation": {
            "value": "\n```python\nfrom news.migrations.0008_rename_video_post_videos import Migration\n```\n\n```python\n\n\n```\n\n```python\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0007_post_tags'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='post',\n            old_name='video',\n            new_name='videos',\n        ),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "news.migrations.0009_comment",
        "description": "news.migrations.0009_comment",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0008_rename_video_post_videos'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Comment',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=80)),",
        "detail": "news.migrations.0009_comment",
        "documentation": {
            "value": "\n```python\nfrom news.migrations.0009_comment import Migration\n```\n\n```python\n\n\n```\n\n```python\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0008_rename_video_post_videos'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Comment',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(max_length=80)),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "news.migrations.0010_alter_comment_post",
        "description": "news.migrations.0010_alter_comment_post",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0009_comment'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='comment',\n            name='post',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='news.post'),\n        ),",
        "detail": "news.migrations.0010_alter_comment_post",
        "documentation": {
            "value": "\n```python\nfrom news.migrations.0010_alter_comment_post import Migration\n```\n\n```python\n\n\n```\n\n```python\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0009_comment'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='comment',\n            name='post',\n            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='news.post'),\n        ),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "news.migrations.0011_comment_user_alter_comment_name",
        "description": "news.migrations.0011_comment_user_alter_comment_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0010_alter_comment_post'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='comment',\n            name='user',\n            field=models.ForeignKey(default='ba94a1b9-8dce-4e5c-a0df-be383b13a070', on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL),",
        "detail": "news.migrations.0011_comment_user_alter_comment_name",
        "documentation": {
            "value": "\n```python\nfrom news.migrations.0011_comment_user_alter_comment_name import Migration\n```\n\n```python\n\n\n```\n\n```python\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0010_alter_comment_post'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='comment',\n            name='user',\n            field=models.ForeignKey(default='ba94a1b9-8dce-4e5c-a0df-be383b13a070', on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "news.migrations.0012_reply",
        "description": "news.migrations.0012_reply",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0011_comment_user_alter_comment_name'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Reply',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),",
        "detail": "news.migrations.0012_reply",
        "documentation": {
            "value": "\n```python\nfrom news.migrations.0012_reply import Migration\n```\n\n```python\n\n\n```\n\n```python\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0011_comment_user_alter_comment_name'),\n        migrations.swappable_dependency(settings.AUTH_USER_MODEL),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Reply',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "news.migrations.0013_message_alter_comment_options_alter_reply_options",
        "description": "news.migrations.0013_message_alter_comment_options_alter_reply_options",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0012_reply'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Message',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(db_index=True, max_length=256)),",
        "detail": "news.migrations.0013_message_alter_comment_options_alter_reply_options",
        "documentation": {
            "value": "\n```python\nfrom news.migrations.0013_message_alter_comment_options_alter_reply_options import Migration\n```\n\n```python\n\n\n```\n\n```python\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0012_reply'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Message',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('name', models.CharField(db_index=True, max_length=256)),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "news.migrations.0014_alter_post_videos",
        "description": "news.migrations.0014_alter_post_videos",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0013_message_alter_comment_options_alter_reply_options'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='post',\n            name='videos',\n            field=embed_video.fields.EmbedVideoField(blank=True),\n        ),",
        "detail": "news.migrations.0014_alter_post_videos",
        "documentation": {
            "value": "\n```python\nfrom news.migrations.0014_alter_post_videos import Migration\n```\n\n```python\n\n\n```\n\n```python\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0013_message_alter_comment_options_alter_reply_options'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='post',\n            name='videos',\n            field=embed_video.fields.EmbedVideoField(blank=True),\n        ),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "news.migrations.0015_post_views",
        "description": "news.migrations.0015_post_views",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0014_alter_post_videos'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='post',\n            name='views',\n            field=models.PositiveIntegerField(default=0),\n        ),",
        "detail": "news.migrations.0015_post_views",
        "documentation": {
            "value": "\n```python\nfrom news.migrations.0015_post_views import Migration\n```\n\n```python\n\n\n```\n\n```python\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0014_alter_post_videos'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='post',\n            name='views',\n            field=models.PositiveIntegerField(default=0),\n        ),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "news.migrations.0016_alter_post_active_alter_post_slug",
        "description": "news.migrations.0016_alter_post_active_alter_post_slug",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0015_post_views'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='post',\n            name='active',\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "news.migrations.0016_alter_post_active_alter_post_slug",
        "documentation": {
            "value": "\n```python\nfrom news.migrations.0016_alter_post_active_alter_post_slug import Migration\n```\n\n```python\n\n\n```\n\n```python\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0015_post_views'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='post',\n            name='active',\n            field=models.BooleanField(default=False),\n        ),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "news.migrations.0017_alter_post_active_alter_post_name",
        "description": "news.migrations.0017_alter_post_active_alter_post_name",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0016_alter_post_active_alter_post_slug'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='post',\n            name='active',\n            field=models.BooleanField(default=True),\n        ),",
        "detail": "news.migrations.0017_alter_post_active_alter_post_name",
        "documentation": {
            "value": "\n```python\nfrom news.migrations.0017_alter_post_active_alter_post_name import Migration\n```\n\n```python\n\n\n```\n\n```python\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0016_alter_post_active_alter_post_slug'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='post',\n            name='active',\n            field=models.BooleanField(default=True),\n        ),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "news.migrations.0018_alter_author_created_alter_author_updated_and_more",
        "description": "news.migrations.0018_alter_author_created_alter_author_updated_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0017_alter_post_active_alter_post_name'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='author',\n            name='created',\n            field=models.DateTimeField(auto_now_add=True),\n        ),",
        "detail": "news.migrations.0018_alter_author_created_alter_author_updated_and_more",
        "documentation": {
            "value": "\n```python\nfrom news.migrations.0018_alter_author_created_alter_author_updated_and_more import Migration\n```\n\n```python\n\n\n```\n\n```python\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0017_alter_post_active_alter_post_name'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='author',\n            name='created',\n            field=models.DateTimeField(auto_now_add=True),\n        ),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "news.migrations.0019_alter_post_active",
        "description": "news.migrations.0019_alter_post_active",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0018_alter_author_created_alter_author_updated_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='post',\n            name='active',\n            field=models.BooleanField(default=False),\n        ),",
        "detail": "news.migrations.0019_alter_post_active",
        "documentation": {
            "value": "\n```python\nfrom news.migrations.0019_alter_post_active import Migration\n```\n\n```python\n\n\n```\n\n```python\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0018_alter_author_created_alter_author_updated_and_more'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='post',\n            name='active',\n            field=models.BooleanField(default=False),\n        ),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "news.migrations.0020_author_about_author_email",
        "description": "news.migrations.0020_author_about_author_email",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0019_alter_post_active'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='author',\n            name='about',\n            field=models.TextField(blank=True),\n        ),",
        "detail": "news.migrations.0020_author_about_author_email",
        "documentation": {
            "value": "\n```python\nfrom news.migrations.0020_author_about_author_email import Migration\n```\n\n```python\n\n\n```\n\n```python\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('news', '0019_alter_post_active'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='author',\n            name='about',\n            field=models.TextField(blank=True),\n        ),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CategoryAdmin",
        "kind": 6,
        "importPath": "news.admin",
        "description": "news.admin",
        "peekOfCode": "class CategoryAdmin(admin.ModelAdmin):\n    list_display = ['name', 'slug', 'created', 'updated']\n    list_filter = ['name', 'slug']\n    prepopulated_fields = {'slug': ('name',)}\n    list_per_page = 10\n@admin.register(Author)\nclass AuthorAdmin(admin.ModelAdmin):\n    list_display = ['user', 'created', 'updated'] \n    list_filter = ['user']\n@admin.register(Post)",
        "detail": "news.admin",
        "documentation": {
            "value": "\n```python\nfrom news.admin import CategoryAdmin\n```\n\n```python\n\n\n```\n\n```python\nclass CategoryAdmin(admin.ModelAdmin):\n    list_display = ['name', 'slug', 'created', 'updated']\n    list_filter = ['name', 'slug']\n    prepopulated_fields = {'slug': ('name',)}\n    list_per_page = 10\n@admin.register(Author)\nclass AuthorAdmin(admin.ModelAdmin):\n    list_display = ['user', 'created', 'updated'] \n    list_filter = ['user']\n@admin.register(Post)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AuthorAdmin",
        "kind": 6,
        "importPath": "news.admin",
        "description": "news.admin",
        "peekOfCode": "class AuthorAdmin(admin.ModelAdmin):\n    list_display = ['user', 'created', 'updated'] \n    list_filter = ['user']\n@admin.register(Post)\nclass PostAdmin(admin.ModelAdmin):\n    list_display = ['name', 'category','slug', 'author', 'publish', 'active', 'created', 'updated']\n    list_filter = ['name', 'category', 'slug', 'author', 'active',]\n    prepopulated_fields = {'slug': ('name',)}\n    list_per_page = 10    \n@admin.register(Comment)   ",
        "detail": "news.admin",
        "documentation": {
            "value": "\n```python\nfrom news.admin import AuthorAdmin\n```\n\n```python\n\n\n```\n\n```python\nclass AuthorAdmin(admin.ModelAdmin):\n    list_display = ['user', 'created', 'updated'] \n    list_filter = ['user']\n@admin.register(Post)\nclass PostAdmin(admin.ModelAdmin):\n    list_display = ['name', 'category','slug', 'author', 'publish', 'active', 'created', 'updated']\n    list_filter = ['name', 'category', 'slug', 'author', 'active',]\n    prepopulated_fields = {'slug': ('name',)}\n    list_per_page = 10    \n@admin.register(Comment)   \n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PostAdmin",
        "kind": 6,
        "importPath": "news.admin",
        "description": "news.admin",
        "peekOfCode": "class PostAdmin(admin.ModelAdmin):\n    list_display = ['name', 'category','slug', 'author', 'publish', 'active', 'created', 'updated']\n    list_filter = ['name', 'category', 'slug', 'author', 'active',]\n    prepopulated_fields = {'slug': ('name',)}\n    list_per_page = 10    \n@admin.register(Comment)   \nclass CommentAdmin(admin.ModelAdmin):\n    list_display = ['name', 'email', 'post', 'created', 'active']\n    list_filter = ['active', 'created', 'updated']\n    search_fields = ['name', 'email', 'body']",
        "detail": "news.admin",
        "documentation": {
            "value": "\n```python\nfrom news.admin import PostAdmin\n```\n\n```python\n\n\n```\n\n```python\nclass PostAdmin(admin.ModelAdmin):\n    list_display = ['name', 'category','slug', 'author', 'publish', 'active', 'created', 'updated']\n    list_filter = ['name', 'category', 'slug', 'author', 'active',]\n    prepopulated_fields = {'slug': ('name',)}\n    list_per_page = 10    \n@admin.register(Comment)   \nclass CommentAdmin(admin.ModelAdmin):\n    list_display = ['name', 'email', 'post', 'created', 'active']\n    list_filter = ['active', 'created', 'updated']\n    search_fields = ['name', 'email', 'body']\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CommentAdmin",
        "kind": 6,
        "importPath": "news.admin",
        "description": "news.admin",
        "peekOfCode": "class CommentAdmin(admin.ModelAdmin):\n    list_display = ['name', 'email', 'post', 'created', 'active']\n    list_filter = ['active', 'created', 'updated']\n    search_fields = ['name', 'email', 'body']",
        "detail": "news.admin",
        "documentation": {
            "value": "\n```python\nfrom news.admin import CommentAdmin\n```\n\n```python\n\n\n```\n\n```python\nclass CommentAdmin(admin.ModelAdmin):\n    list_display = ['name', 'email', 'post', 'created', 'active']\n    list_filter = ['active', 'created', 'updated']\n    search_fields = ['name', 'email', 'body']\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "NewsConfig",
        "kind": 6,
        "importPath": "news.apps",
        "description": "news.apps",
        "peekOfCode": "class NewsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'news'\n    def ready(self):\n        import news.signals",
        "detail": "news.apps",
        "documentation": {
            "value": "\n```python\nfrom news.apps import NewsConfig\n```\n\n```python\n\n\n```\n\n```python\nclass NewsConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'news'\n    def ready(self):\n        import news.signals\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CommentForm",
        "kind": 6,
        "importPath": "news.forms",
        "description": "news.forms",
        "peekOfCode": "class CommentForm(forms.ModelForm):\n    class Meta:\n        model = Comment\n        fields = ['email', 'body']\nclass ReplyForm(forms.ModelForm):\n    class Meta:\n        model = Reply\n        fields = ['body']        \nclass PostForm(forms.ModelForm):\n    class Meta:",
        "detail": "news.forms",
        "documentation": {
            "value": "\n```python\nfrom news.forms import CommentForm\n```\n\n```python\n\n\n```\n\n```python\nclass CommentForm(forms.ModelForm):\n    class Meta:\n        model = Comment\n        fields = ['email', 'body']\nclass ReplyForm(forms.ModelForm):\n    class Meta:\n        model = Reply\n        fields = ['body']        \nclass PostForm(forms.ModelForm):\n    class Meta:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ReplyForm",
        "kind": 6,
        "importPath": "news.forms",
        "description": "news.forms",
        "peekOfCode": "class ReplyForm(forms.ModelForm):\n    class Meta:\n        model = Reply\n        fields = ['body']        \nclass PostForm(forms.ModelForm):\n    class Meta:\n        model = Post       \n        fields = ['category', 'name', 'image', 'text', 'tags', 'videos']\n        widgets =  {\n            'text': CKEditorWidget(),",
        "detail": "news.forms",
        "documentation": {
            "value": "\n```python\nfrom news.forms import ReplyForm\n```\n\n```python\n\n\n```\n\n```python\nclass ReplyForm(forms.ModelForm):\n    class Meta:\n        model = Reply\n        fields = ['body']        \nclass PostForm(forms.ModelForm):\n    class Meta:\n        model = Post       \n        fields = ['category', 'name', 'image', 'text', 'tags', 'videos']\n        widgets =  {\n            'text': CKEditorWidget(),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PostForm",
        "kind": 6,
        "importPath": "news.forms",
        "description": "news.forms",
        "peekOfCode": "class PostForm(forms.ModelForm):\n    class Meta:\n        model = Post       \n        fields = ['category', 'name', 'image', 'text', 'tags', 'videos']\n        widgets =  {\n            'text': CKEditorWidget(),\n        }\nclass AuthorForm(forms.ModelForm):\n    class Meta:\n        model = Author",
        "detail": "news.forms",
        "documentation": {
            "value": "\n```python\nfrom news.forms import PostForm\n```\n\n```python\n\n\n```\n\n```python\nclass PostForm(forms.ModelForm):\n    class Meta:\n        model = Post       \n        fields = ['category', 'name', 'image', 'text', 'tags', 'videos']\n        widgets =  {\n            'text': CKEditorWidget(),\n        }\nclass AuthorForm(forms.ModelForm):\n    class Meta:\n        model = Author\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AuthorForm",
        "kind": 6,
        "importPath": "news.forms",
        "description": "news.forms",
        "peekOfCode": "class AuthorForm(forms.ModelForm):\n    class Meta:\n        model = Author\n        fields = ['email', 'about']\nclass MessageForm(forms.ModelForm):\n    class Meta:\n        model = Message\n        fields = ['name', 'email', 'subject', 'messages']\nclass SearchForm(forms.Form):\n    query = forms.CharField()",
        "detail": "news.forms",
        "documentation": {
            "value": "\n```python\nfrom news.forms import AuthorForm\n```\n\n```python\n\n\n```\n\n```python\nclass AuthorForm(forms.ModelForm):\n    class Meta:\n        model = Author\n        fields = ['email', 'about']\nclass MessageForm(forms.ModelForm):\n    class Meta:\n        model = Message\n        fields = ['name', 'email', 'subject', 'messages']\nclass SearchForm(forms.Form):\n    query = forms.CharField()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MessageForm",
        "kind": 6,
        "importPath": "news.forms",
        "description": "news.forms",
        "peekOfCode": "class MessageForm(forms.ModelForm):\n    class Meta:\n        model = Message\n        fields = ['name', 'email', 'subject', 'messages']\nclass SearchForm(forms.Form):\n    query = forms.CharField()",
        "detail": "news.forms",
        "documentation": {
            "value": "\n```python\nfrom news.forms import MessageForm\n```\n\n```python\n\n\n```\n\n```python\nclass MessageForm(forms.ModelForm):\n    class Meta:\n        model = Message\n        fields = ['name', 'email', 'subject', 'messages']\nclass SearchForm(forms.Form):\n    query = forms.CharField()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SearchForm",
        "kind": 6,
        "importPath": "news.forms",
        "description": "news.forms",
        "peekOfCode": "class SearchForm(forms.Form):\n    query = forms.CharField()",
        "detail": "news.forms",
        "documentation": {
            "value": "\n```python\nfrom news.forms import SearchForm\n```\n\n```python\n\n\n```\n\n```python\nclass SearchForm(forms.Form):\n    query = forms.CharField()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Category",
        "kind": 6,
        "importPath": "news.models",
        "description": "news.models",
        "peekOfCode": "class Category(models.Model):\n    name = models.CharField(max_length=256, db_index=True)\n    slug = models.SlugField(max_length=256)\n    created = models.DateTimeField(auto_now=True)\n    updated = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.name\n    def get_absolute_url(self):\n        return reverse('category_details', args=[self.slug])    \n    class Meta:",
        "detail": "news.models",
        "documentation": {
            "value": "\n```python\nfrom news.models import Category\n```\n\n```python\n\n\n```\n\n```python\nclass Category(models.Model):\n    name = models.CharField(max_length=256, db_index=True)\n    slug = models.SlugField(max_length=256)\n    created = models.DateTimeField(auto_now=True)\n    updated = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.name\n    def get_absolute_url(self):\n        return reverse('category_details', args=[self.slug])    \n    class Meta:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Author",
        "kind": 6,
        "importPath": "news.models",
        "description": "news.models",
        "peekOfCode": "class Author(models.Model):\n    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='authors',)\n    email = models.EmailField(blank=True)\n    about = models.TextField(blank=True)\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.user.username    \nclass Post(models.Model):\n    category = models.ForeignKey(Category, on_delete=models.PROTECT, related_name='posts')",
        "detail": "news.models",
        "documentation": {
            "value": "\n```python\nfrom news.models import Author\n```\n\n```python\n\n\n```\n\n```python\nclass Author(models.Model):\n    user = models.OneToOneField(settings.AUTH_USER_MODEL, on_delete=models.CASCADE, related_name='authors',)\n    email = models.EmailField(blank=True)\n    about = models.TextField(blank=True)\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(auto_now=True)\n    def __str__(self):\n        return self.user.username    \nclass Post(models.Model):\n    category = models.ForeignKey(Category, on_delete=models.PROTECT, related_name='posts')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Post",
        "kind": 6,
        "importPath": "news.models",
        "description": "news.models",
        "peekOfCode": "class Post(models.Model):\n    category = models.ForeignKey(Category, on_delete=models.PROTECT, related_name='posts')\n    name = models.CharField(max_length=256)\n    slug = models.SlugField(max_length=256, unique_for_date='publish', blank=True)\n    active = models.BooleanField(default=False)\n    author = models.ForeignKey(Author, on_delete=models.PROTECT, related_name='posts')\n    publish = models.DateTimeField(default=timezone.now)\n    image = models.ImageField(upload_to='posts_images')\n    text = RichTextField()\n    views = views = models.PositiveIntegerField(default=0)",
        "detail": "news.models",
        "documentation": {
            "value": "\n```python\nfrom news.models import Post\n```\n\n```python\n\n\n```\n\n```python\nclass Post(models.Model):\n    category = models.ForeignKey(Category, on_delete=models.PROTECT, related_name='posts')\n    name = models.CharField(max_length=256)\n    slug = models.SlugField(max_length=256, unique_for_date='publish', blank=True)\n    active = models.BooleanField(default=False)\n    author = models.ForeignKey(Author, on_delete=models.PROTECT, related_name='posts')\n    publish = models.DateTimeField(default=timezone.now)\n    image = models.ImageField(upload_to='posts_images')\n    text = RichTextField()\n    views = views = models.PositiveIntegerField(default=0)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Comment",
        "kind": 6,
        "importPath": "news.models",
        "description": "news.models",
        "peekOfCode": "class Comment(models.Model):\n    post = models.name = models.ForeignKey('Post', related_name='comments', on_delete=models.CASCADE)\n    user = models.ForeignKey(to='users.User', related_name='comments', on_delete=models.CASCADE, default='ba94a1b9-8dce-4e5c-a0df-be383b13a070')\n    name = models.CharField(max_length=80, blank=True, null=True)\n    email = models.EmailField()\n    body = models.TextField()\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(auto_now=True)\n    active = models.BooleanField(default=True)\n    class Meta:",
        "detail": "news.models",
        "documentation": {
            "value": "\n```python\nfrom news.models import Comment\n```\n\n```python\n\n\n```\n\n```python\nclass Comment(models.Model):\n    post = models.name = models.ForeignKey('Post', related_name='comments', on_delete=models.CASCADE)\n    user = models.ForeignKey(to='users.User', related_name='comments', on_delete=models.CASCADE, default='ba94a1b9-8dce-4e5c-a0df-be383b13a070')\n    name = models.CharField(max_length=80, blank=True, null=True)\n    email = models.EmailField()\n    body = models.TextField()\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(auto_now=True)\n    active = models.BooleanField(default=True)\n    class Meta:\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Reply",
        "kind": 6,
        "importPath": "news.models",
        "description": "news.models",
        "peekOfCode": "class Reply(models.Model):\n    comment = models.ForeignKey('Comment', on_delete=models.CASCADE, related_name='replies')\n    user = models.ForeignKey(to='users.User', on_delete=models.CASCADE, related_name='replies')\n    body = models.TextField()\n    active = models.BooleanField(default=True)\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(auto_now=True)\n    active = models.BooleanField(default=True)\n    class Meta:\n        ordering = ['-created']",
        "detail": "news.models",
        "documentation": {
            "value": "\n```python\nfrom news.models import Reply\n```\n\n```python\n\n\n```\n\n```python\nclass Reply(models.Model):\n    comment = models.ForeignKey('Comment', on_delete=models.CASCADE, related_name='replies')\n    user = models.ForeignKey(to='users.User', on_delete=models.CASCADE, related_name='replies')\n    body = models.TextField()\n    active = models.BooleanField(default=True)\n    created = models.DateTimeField(auto_now_add=True)\n    updated = models.DateTimeField(auto_now=True)\n    active = models.BooleanField(default=True)\n    class Meta:\n        ordering = ['-created']\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Message",
        "kind": 6,
        "importPath": "news.models",
        "description": "news.models",
        "peekOfCode": "class Message(models.Model):\n    name = models.CharField(max_length=256, db_index=True)\n    email = models.EmailField()\n    subject = models.CharField()\n    messages = models.TextField()\n    def __str__(self):\n        return f'Message by {self.name} and {self.email}'",
        "detail": "news.models",
        "documentation": {
            "value": "\n```python\nfrom news.models import Message\n```\n\n```python\n\n\n```\n\n```python\nclass Message(models.Model):\n    name = models.CharField(max_length=256, db_index=True)\n    email = models.EmailField()\n    subject = models.CharField()\n    messages = models.TextField()\n    def __str__(self):\n        return f'Message by {self.name} and {self.email}'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "create_slug",
        "kind": 2,
        "importPath": "news.signals",
        "description": "news.signals",
        "peekOfCode": "def create_slug(sender,instance, **kwargs):\n    if not instance.slug:\n        instance.slug = slugify(instance.name)",
        "detail": "news.signals",
        "documentation": {
            "value": "\n```python\nfrom news.signals import create_slug\n```\n\n```python\n\n\n```\n\n```python\ndef create_slug(sender,instance, **kwargs):\n    if not instance.slug:\n        instance.slug = slugify(instance.name)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "User",
        "kind": 5,
        "importPath": "news.signals",
        "description": "news.signals",
        "peekOfCode": "User = get_user_model()\n@receiver(pre_save, sender=Post)\ndef create_slug(sender,instance, **kwargs):\n    if not instance.slug:\n        instance.slug = slugify(instance.name)",
        "detail": "news.signals",
        "documentation": {
            "value": "\n```python\nfrom news.signals import User\n```\n\n```python\n\n\n```\n\n```python\nUser = get_user_model()\n@receiver(pre_save, sender=Post)\ndef create_slug(sender,instance, **kwargs):\n    if not instance.slug:\n        instance.slug = slugify(instance.name)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "news.urls",
        "description": "news.urls",
        "peekOfCode": "urlpatterns = [\n    path('', views.HomePage.as_view(), name='home'),\n    path('category/<slug:slug>/', views.Category_details.as_view(), name='category_details'),\n    path('author/<str:username>/', views.Author_posts.as_view(), name='authors_posts'),\n    path('tags/<slug:slug>/', views.Tag_Detail.as_view(), name='tag_details'),\n    path('reply/<int:reply>/', views.post_details, name='reply_details'),\n    path('mine/', views.ManagePostListView.as_view(), name='manage_post_list'),\n    path('comment_reply/<int:id>/', views.reply_comment, name='comment_reply'),\n    path('create/', views.PostCreateView.as_view(), name='post_create'),\n    path('post_create/', views.create_post, name='create_post'),",
        "detail": "news.urls",
        "documentation": {
            "value": "\n```python\nfrom news.urls import urlpatterns\n```\n\n```python\n\n\n```\n\n```python\nurlpatterns = [\n    path('', views.HomePage.as_view(), name='home'),\n    path('category/<slug:slug>/', views.Category_details.as_view(), name='category_details'),\n    path('author/<str:username>/', views.Author_posts.as_view(), name='authors_posts'),\n    path('tags/<slug:slug>/', views.Tag_Detail.as_view(), name='tag_details'),\n    path('reply/<int:reply>/', views.post_details, name='reply_details'),\n    path('mine/', views.ManagePostListView.as_view(), name='manage_post_list'),\n    path('comment_reply/<int:id>/', views.reply_comment, name='comment_reply'),\n    path('create/', views.PostCreateView.as_view(), name='post_create'),\n    path('post_create/', views.create_post, name='create_post'),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "HomePage",
        "kind": 6,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "class HomePage(ListView):\n    model = Post\n    template_name = 'news/index.html'\n    context_object_name = 'posts'\n    def get_queryset(self):\n        #category = Category.objects.get(name='Trending News')\n        return Post.objects.filter(category__name='Trending News', active=True).order_by('-publish')[:5]\ndef post_details(request, id, slug, year, month, day, reply=None):\n    post = get_object_or_404(Post, id=id, slug=slug, publish__year=year, publish__month=month, publish__day=day, active=True)\n    request.session['post_title'] = post.name",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import HomePage\n```\n\n```python\n\n\n```\n\n```python\nclass HomePage(ListView):\n    model = Post\n    template_name = 'news/index.html'\n    context_object_name = 'posts'\n    def get_queryset(self):\n        #category = Category.objects.get(name='Trending News')\n        return Post.objects.filter(category__name='Trending News', active=True).order_by('-publish')[:5]\ndef post_details(request, id, slug, year, month, day, reply=None):\n    post = get_object_or_404(Post, id=id, slug=slug, publish__year=year, publish__month=month, publish__day=day, active=True)\n    request.session['post_title'] = post.name\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Category_details",
        "kind": 6,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "class Category_details(ListView):\n    model = Post\n    template_name = 'news/category.html'\n    context_object_name = 'post_cate'\n    paginate_by = 4\n    def get_queryset(self):\n        category = get_object_or_404(Category, slug=self.kwargs['slug'])\n        posts = Post.objects.filter(category=category, active=True).order_by('-created')\n        return posts\nclass Author_posts(ListView):",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import Category_details\n```\n\n```python\n\n\n```\n\n```python\nclass Category_details(ListView):\n    model = Post\n    template_name = 'news/category.html'\n    context_object_name = 'post_cate'\n    paginate_by = 4\n    def get_queryset(self):\n        category = get_object_or_404(Category, slug=self.kwargs['slug'])\n        posts = Post.objects.filter(category=category, active=True).order_by('-created')\n        return posts\nclass Author_posts(ListView):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Author_posts",
        "kind": 6,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "class Author_posts(ListView):\n    model = Post\n    template_name = 'news/author.html'\n    context_object_name = 'author_cate'\n    paginate_by = 4\n    def get_queryset(self):\n        author = get_object_or_404(Author, user__username=self.kwargs['username'])\n        print(author)\n        posts = Post.objects.filter(author=author, active=True).order_by('-publish')\n        return posts",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import Author_posts\n```\n\n```python\n\n\n```\n\n```python\nclass Author_posts(ListView):\n    model = Post\n    template_name = 'news/author.html'\n    context_object_name = 'author_cate'\n    paginate_by = 4\n    def get_queryset(self):\n        author = get_object_or_404(Author, user__username=self.kwargs['username'])\n        print(author)\n        posts = Post.objects.filter(author=author, active=True).order_by('-publish')\n        return posts\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Tag_Detail",
        "kind": 6,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "class Tag_Detail(ListView):\n    model = Post\n    template_name = 'news/tag.html'\n    context_object_name = 'tags'\n    paginate_by = 1\n    def get_queryset(self):\n        tags = get_object_or_404(Tag, slug=self.kwargs['slug'])\n        post_tags = Post.objects.filter(tags=tags)\n        return post_tags\ndef recent_posts(request):",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import Tag_Detail\n```\n\n```python\n\n\n```\n\n```python\nclass Tag_Detail(ListView):\n    model = Post\n    template_name = 'news/tag.html'\n    context_object_name = 'tags'\n    paginate_by = 1\n    def get_queryset(self):\n        tags = get_object_or_404(Tag, slug=self.kwargs['slug'])\n        post_tags = Post.objects.filter(tags=tags)\n        return post_tags\ndef recent_posts(request):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PostSearchView",
        "kind": 6,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "class PostSearchView(ListView):\n    model = Post\n    context_object_name = \"posts\"\n    template_name = \"news/search-result.html\"\n    def get_queryset(self):\n        query = self.request.GET.get(\"q\")\n        search_vector = SearchVector(\"name\", \"text\")\n        search_query = SearchQuery(query)\n        search_headline = SearchHeadline(\"text\", search_query)\n        return Post.objects.annotate(",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import PostSearchView\n```\n\n```python\n\n\n```\n\n```python\nclass PostSearchView(ListView):\n    model = Post\n    context_object_name = \"posts\"\n    template_name = \"news/search-result.html\"\n    def get_queryset(self):\n        query = self.request.GET.get(\"q\")\n        search_vector = SearchVector(\"name\", \"text\")\n        search_query = SearchQuery(query)\n        search_headline = SearchHeadline(\"text\", search_query)\n        return Post.objects.annotate(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "OwnerMixin",
        "kind": 6,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "class OwnerMixin:\n    def get_queryset(self):\n        qs = super().get_queryset()\n        return qs.filter(author__user=self.request.user).order_by('-publish')\nclass OwnerEditMixin:\n    def form_valid(self, form):\n        author = Author.objects.get_or_create(user=self.request.user)[0]\n        print(author)\n        form.instance.author = author\n        return super().form_valid(form)",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import OwnerMixin\n```\n\n```python\n\n\n```\n\n```python\nclass OwnerMixin:\n    def get_queryset(self):\n        qs = super().get_queryset()\n        return qs.filter(author__user=self.request.user).order_by('-publish')\nclass OwnerEditMixin:\n    def form_valid(self, form):\n        author = Author.objects.get_or_create(user=self.request.user)[0]\n        print(author)\n        form.instance.author = author\n        return super().form_valid(form)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "OwnerEditMixin",
        "kind": 6,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "class OwnerEditMixin:\n    def form_valid(self, form):\n        author = Author.objects.get_or_create(user=self.request.user)[0]\n        print(author)\n        form.instance.author = author\n        return super().form_valid(form)\nclass OwnerPostMixin(OwnerMixin, FormView, LoginRequiredMixin, PermissionRequiredMixin):\n    model = Post\n    form_class = PostForm\n    success_url = reverse_lazy('manage_post_list')",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import OwnerEditMixin\n```\n\n```python\n\n\n```\n\n```python\nclass OwnerEditMixin:\n    def form_valid(self, form):\n        author = Author.objects.get_or_create(user=self.request.user)[0]\n        print(author)\n        form.instance.author = author\n        return super().form_valid(form)\nclass OwnerPostMixin(OwnerMixin, FormView, LoginRequiredMixin, PermissionRequiredMixin):\n    model = Post\n    form_class = PostForm\n    success_url = reverse_lazy('manage_post_list')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "OwnerPostMixin",
        "kind": 6,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "class OwnerPostMixin(OwnerMixin, FormView, LoginRequiredMixin, PermissionRequiredMixin):\n    model = Post\n    form_class = PostForm\n    success_url = reverse_lazy('manage_post_list')\nclass OwnerPostEditMixin(OwnerPostMixin, OwnerEditMixin):\n    template_name = 'news/manage/form.html'\nclass ManagePostListView(OwnerPostMixin, ListView):\n    paginate_by = 9\n    template_name = 'news/manage/list.html'\n    permission_required = 'news.view_post'",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import OwnerPostMixin\n```\n\n```python\n\n\n```\n\n```python\nclass OwnerPostMixin(OwnerMixin, FormView, LoginRequiredMixin, PermissionRequiredMixin):\n    model = Post\n    form_class = PostForm\n    success_url = reverse_lazy('manage_post_list')\nclass OwnerPostEditMixin(OwnerPostMixin, OwnerEditMixin):\n    template_name = 'news/manage/form.html'\nclass ManagePostListView(OwnerPostMixin, ListView):\n    paginate_by = 9\n    template_name = 'news/manage/list.html'\n    permission_required = 'news.view_post'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "OwnerPostEditMixin",
        "kind": 6,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "class OwnerPostEditMixin(OwnerPostMixin, OwnerEditMixin):\n    template_name = 'news/manage/form.html'\nclass ManagePostListView(OwnerPostMixin, ListView):\n    paginate_by = 9\n    template_name = 'news/manage/list.html'\n    permission_required = 'news.view_post'\nclass PostCreateView(OwnerPostEditMixin, CreateView):\n        permission_required = 'news.add_post'\nclass PostUpdateView(OwnerPostEditMixin, UpdateView):\n        permission_required = 'news.change_post'",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import OwnerPostEditMixin\n```\n\n```python\n\n\n```\n\n```python\nclass OwnerPostEditMixin(OwnerPostMixin, OwnerEditMixin):\n    template_name = 'news/manage/form.html'\nclass ManagePostListView(OwnerPostMixin, ListView):\n    paginate_by = 9\n    template_name = 'news/manage/list.html'\n    permission_required = 'news.view_post'\nclass PostCreateView(OwnerPostEditMixin, CreateView):\n        permission_required = 'news.add_post'\nclass PostUpdateView(OwnerPostEditMixin, UpdateView):\n        permission_required = 'news.change_post'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ManagePostListView",
        "kind": 6,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "class ManagePostListView(OwnerPostMixin, ListView):\n    paginate_by = 9\n    template_name = 'news/manage/list.html'\n    permission_required = 'news.view_post'\nclass PostCreateView(OwnerPostEditMixin, CreateView):\n        permission_required = 'news.add_post'\nclass PostUpdateView(OwnerPostEditMixin, UpdateView):\n        permission_required = 'news.change_post'\nclass PostDeleteView(DeleteView, PermissionRequiredMixin):\n    model = Post",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import ManagePostListView\n```\n\n```python\n\n\n```\n\n```python\nclass ManagePostListView(OwnerPostMixin, ListView):\n    paginate_by = 9\n    template_name = 'news/manage/list.html'\n    permission_required = 'news.view_post'\nclass PostCreateView(OwnerPostEditMixin, CreateView):\n        permission_required = 'news.add_post'\nclass PostUpdateView(OwnerPostEditMixin, UpdateView):\n        permission_required = 'news.change_post'\nclass PostDeleteView(DeleteView, PermissionRequiredMixin):\n    model = Post\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PostCreateView",
        "kind": 6,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "class PostCreateView(OwnerPostEditMixin, CreateView):\n        permission_required = 'news.add_post'\nclass PostUpdateView(OwnerPostEditMixin, UpdateView):\n        permission_required = 'news.change_post'\nclass PostDeleteView(DeleteView, PermissionRequiredMixin):\n    model = Post\n    context_object_name = 'post'\n    template_name = 'news/manage/delete.html'\n    permission_required = 'news.delete_post'\n    success_url = reverse_lazy('manage_post_list')",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import PostCreateView\n```\n\n```python\n\n\n```\n\n```python\nclass PostCreateView(OwnerPostEditMixin, CreateView):\n        permission_required = 'news.add_post'\nclass PostUpdateView(OwnerPostEditMixin, UpdateView):\n        permission_required = 'news.change_post'\nclass PostDeleteView(DeleteView, PermissionRequiredMixin):\n    model = Post\n    context_object_name = 'post'\n    template_name = 'news/manage/delete.html'\n    permission_required = 'news.delete_post'\n    success_url = reverse_lazy('manage_post_list')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PostUpdateView",
        "kind": 6,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "class PostUpdateView(OwnerPostEditMixin, UpdateView):\n        permission_required = 'news.change_post'\nclass PostDeleteView(DeleteView, PermissionRequiredMixin):\n    model = Post\n    context_object_name = 'post'\n    template_name = 'news/manage/delete.html'\n    permission_required = 'news.delete_post'\n    success_url = reverse_lazy('manage_post_list')\n@permission_required('news.add_post')     \n@login_required",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import PostUpdateView\n```\n\n```python\n\n\n```\n\n```python\nclass PostUpdateView(OwnerPostEditMixin, UpdateView):\n        permission_required = 'news.change_post'\nclass PostDeleteView(DeleteView, PermissionRequiredMixin):\n    model = Post\n    context_object_name = 'post'\n    template_name = 'news/manage/delete.html'\n    permission_required = 'news.delete_post'\n    success_url = reverse_lazy('manage_post_list')\n@permission_required('news.add_post')     \n@login_required\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "PostDeleteView",
        "kind": 6,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "class PostDeleteView(DeleteView, PermissionRequiredMixin):\n    model = Post\n    context_object_name = 'post'\n    template_name = 'news/manage/delete.html'\n    permission_required = 'news.delete_post'\n    success_url = reverse_lazy('manage_post_list')\n@permission_required('news.add_post')     \n@login_required\ndef create_post(request):\n    author = Author.objects.get(user=request.user)",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import PostDeleteView\n```\n\n```python\n\n\n```\n\n```python\nclass PostDeleteView(DeleteView, PermissionRequiredMixin):\n    model = Post\n    context_object_name = 'post'\n    template_name = 'news/manage/delete.html'\n    permission_required = 'news.delete_post'\n    success_url = reverse_lazy('manage_post_list')\n@permission_required('news.add_post')     \n@login_required\ndef create_post(request):\n    author = Author.objects.get(user=request.user)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "post_details",
        "kind": 2,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "def post_details(request, id, slug, year, month, day, reply=None):\n    post = get_object_or_404(Post, id=id, slug=slug, publish__year=year, publish__month=month, publish__day=day, active=True)\n    request.session['post_title'] = post.name\n    post.views += 1\n    post.save()\n    related_tags = post.tags.all()\n    comments = post.comments.filter(active=True)\n    user = request.user\n    similiar_post = None\n    comment = None",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import post_details\n```\n\n```python\n\n\n```\n\n```python\ndef post_details(request, id, slug, year, month, day, reply=None):\n    post = get_object_or_404(Post, id=id, slug=slug, publish__year=year, publish__month=month, publish__day=day, active=True)\n    request.session['post_title'] = post.name\n    post.views += 1\n    post.save()\n    related_tags = post.tags.all()\n    comments = post.comments.filter(active=True)\n    user = request.user\n    similiar_post = None\n    comment = None\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "publisher_details",
        "kind": 2,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "def publisher_details(request, id, slug, year, month, day):\n    post = get_object_or_404(Post, id=id, slug=slug, publish__year=year, publish__month=month, publish__day=day)\n    return render(request, 'news/manage/detail.html', {'post': post})\ndef get_categories(request):\n    category = Category.objects.all()    \n    return {'category': category}\nclass Category_details(ListView):\n    model = Post\n    template_name = 'news/category.html'\n    context_object_name = 'post_cate'",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import publisher_details\n```\n\n```python\n\n\n```\n\n```python\ndef publisher_details(request, id, slug, year, month, day):\n    post = get_object_or_404(Post, id=id, slug=slug, publish__year=year, publish__month=month, publish__day=day)\n    return render(request, 'news/manage/detail.html', {'post': post})\ndef get_categories(request):\n    category = Category.objects.all()    \n    return {'category': category}\nclass Category_details(ListView):\n    model = Post\n    template_name = 'news/category.html'\n    context_object_name = 'post_cate'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_categories",
        "kind": 2,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "def get_categories(request):\n    category = Category.objects.all()    \n    return {'category': category}\nclass Category_details(ListView):\n    model = Post\n    template_name = 'news/category.html'\n    context_object_name = 'post_cate'\n    paginate_by = 4\n    def get_queryset(self):\n        category = get_object_or_404(Category, slug=self.kwargs['slug'])",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import get_categories\n```\n\n```python\n\n\n```\n\n```python\ndef get_categories(request):\n    category = Category.objects.all()    \n    return {'category': category}\nclass Category_details(ListView):\n    model = Post\n    template_name = 'news/category.html'\n    context_object_name = 'post_cate'\n    paginate_by = 4\n    def get_queryset(self):\n        category = get_object_or_404(Category, slug=self.kwargs['slug'])\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "recent_posts",
        "kind": 2,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "def recent_posts(request):\n    recent = Post.objects.filter(active=True).order_by('-publish')[:7]\n    return {'recent': recent}\ndef reply_comment(request, id):\n    comment = get_object_or_404(Comment, id=id)\n    reply = None\n    if request.method == 'POST':\n        form = ReplyForm(request.POST)\n        if form.is_valid():\n           reply = form.save(commit=False)",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import recent_posts\n```\n\n```python\n\n\n```\n\n```python\ndef recent_posts(request):\n    recent = Post.objects.filter(active=True).order_by('-publish')[:7]\n    return {'recent': recent}\ndef reply_comment(request, id):\n    comment = get_object_or_404(Comment, id=id)\n    reply = None\n    if request.method == 'POST':\n        form = ReplyForm(request.POST)\n        if form.is_valid():\n           reply = form.save(commit=False)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "reply_comment",
        "kind": 2,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "def reply_comment(request, id):\n    comment = get_object_or_404(Comment, id=id)\n    reply = None\n    if request.method == 'POST':\n        form = ReplyForm(request.POST)\n        if form.is_valid():\n           reply = form.save(commit=False)\n           reply.user = request.user\n           reply.comment = comment\n           reply.save()",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import reply_comment\n```\n\n```python\n\n\n```\n\n```python\ndef reply_comment(request, id):\n    comment = get_object_or_404(Comment, id=id)\n    reply = None\n    if request.method == 'POST':\n        form = ReplyForm(request.POST)\n        if form.is_valid():\n           reply = form.save(commit=False)\n           reply.user = request.user\n           reply.comment = comment\n           reply.save()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "message_admin",
        "kind": 2,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "def message_admin(request):\n    if request.method == 'POST':\n        contact =  MessageForm(request.POST)\n        if contact.is_valid():\n            contact.save()\n            messages.success(request, 'MESSAGE SUBMITTED SUCCESFULLY')\n        else:\n            messages.error(request, 'CORRECT THE ERROR BELOW')\n    else:\n        contact = MessageForm()",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import message_admin\n```\n\n```python\n\n\n```\n\n```python\ndef message_admin(request):\n    if request.method == 'POST':\n        contact =  MessageForm(request.POST)\n        if contact.is_valid():\n            contact.save()\n            messages.success(request, 'MESSAGE SUBMITTED SUCCESFULLY')\n        else:\n            messages.error(request, 'CORRECT THE ERROR BELOW')\n    else:\n        contact = MessageForm()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "post_search",
        "kind": 2,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "def post_search(request):\n    form = SearchForm()\n    query = None\n    results = []\n    if 'query' in request.GET:\n        print(request.GET)\n        form = SearchForm(request.GET)\n        if form.is_valid():\n            query = form.cleaned_data['query']\n            results = Post.objects.annotate(",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import post_search\n```\n\n```python\n\n\n```\n\n```python\ndef post_search(request):\n    form = SearchForm()\n    query = None\n    results = []\n    if 'query' in request.GET:\n        print(request.GET)\n        form = SearchForm(request.GET)\n        if form.is_valid():\n            query = form.cleaned_data['query']\n            results = Post.objects.annotate(\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "most_popular_post",
        "kind": 2,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "def most_popular_post(request):\n    posts = Post.objects.order_by('-views')[:5]\n    most_popular_posts = list(posts)\n    return {'most_popular_posts': most_popular_posts}\ndef get_one_culture(request):\n    culture_category = Category.objects.get(name='Culture')\n    post_culture = Post.objects.filter(category=culture_category, active=True).order_by('-publish')[:1]\n    return {'post_culture': post_culture, 'culture_category': culture_category }\ndef all_posts(request):\n    all_post = Post.objects.filter(active=True).order_by('-publish')[:9]",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import most_popular_post\n```\n\n```python\n\n\n```\n\n```python\ndef most_popular_post(request):\n    posts = Post.objects.order_by('-views')[:5]\n    most_popular_posts = list(posts)\n    return {'most_popular_posts': most_popular_posts}\ndef get_one_culture(request):\n    culture_category = Category.objects.get(name='Culture')\n    post_culture = Post.objects.filter(category=culture_category, active=True).order_by('-publish')[:1]\n    return {'post_culture': post_culture, 'culture_category': culture_category }\ndef all_posts(request):\n    all_post = Post.objects.filter(active=True).order_by('-publish')[:9]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_one_culture",
        "kind": 2,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "def get_one_culture(request):\n    culture_category = Category.objects.get(name='Culture')\n    post_culture = Post.objects.filter(category=culture_category, active=True).order_by('-publish')[:1]\n    return {'post_culture': post_culture, 'culture_category': culture_category }\ndef all_posts(request):\n    all_post = Post.objects.filter(active=True).order_by('-publish')[:9]\n    return {'all_post': all_post }\ndef get_one_trending_news(request):\n    trend_category = Category.objects.get(name='Trending News')\n    post_trend = Post.objects.filter(category=trend_category, active=True).order_by('-publish')[:1]",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import get_one_culture\n```\n\n```python\n\n\n```\n\n```python\ndef get_one_culture(request):\n    culture_category = Category.objects.get(name='Culture')\n    post_culture = Post.objects.filter(category=culture_category, active=True).order_by('-publish')[:1]\n    return {'post_culture': post_culture, 'culture_category': culture_category }\ndef all_posts(request):\n    all_post = Post.objects.filter(active=True).order_by('-publish')[:9]\n    return {'all_post': all_post }\ndef get_one_trending_news(request):\n    trend_category = Category.objects.get(name='Trending News')\n    post_trend = Post.objects.filter(category=trend_category, active=True).order_by('-publish')[:1]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "all_posts",
        "kind": 2,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "def all_posts(request):\n    all_post = Post.objects.filter(active=True).order_by('-publish')[:9]\n    return {'all_post': all_post }\ndef get_one_trending_news(request):\n    trend_category = Category.objects.get(name='Trending News')\n    post_trend = Post.objects.filter(category=trend_category, active=True).order_by('-publish')[:1]\n    return {'post_trend': post_trend, 'trend_category': trend_category }\ndef get_all_trending_posts(request):\n    all_trend_post = Post.objects.filter(category__name='Trending News', active=True).order_by('-publish')[:9]\n    return {'all_trend_post': all_trend_post} ",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import all_posts\n```\n\n```python\n\n\n```\n\n```python\ndef all_posts(request):\n    all_post = Post.objects.filter(active=True).order_by('-publish')[:9]\n    return {'all_post': all_post }\ndef get_one_trending_news(request):\n    trend_category = Category.objects.get(name='Trending News')\n    post_trend = Post.objects.filter(category=trend_category, active=True).order_by('-publish')[:1]\n    return {'post_trend': post_trend, 'trend_category': trend_category }\ndef get_all_trending_posts(request):\n    all_trend_post = Post.objects.filter(category__name='Trending News', active=True).order_by('-publish')[:9]\n    return {'all_trend_post': all_trend_post} \n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_one_trending_news",
        "kind": 2,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "def get_one_trending_news(request):\n    trend_category = Category.objects.get(name='Trending News')\n    post_trend = Post.objects.filter(category=trend_category, active=True).order_by('-publish')[:1]\n    return {'post_trend': post_trend, 'trend_category': trend_category }\ndef get_all_trending_posts(request):\n    all_trend_post = Post.objects.filter(category__name='Trending News', active=True).order_by('-publish')[:9]\n    return {'all_trend_post': all_trend_post} \ndef get_one_buisness_news(request):\n    buisness_category = Category.objects.get(name='Buisness')\n    buisness_trend = Post.objects.filter(category=buisness_category, active=True).order_by('-publish')[:1]",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import get_one_trending_news\n```\n\n```python\n\n\n```\n\n```python\ndef get_one_trending_news(request):\n    trend_category = Category.objects.get(name='Trending News')\n    post_trend = Post.objects.filter(category=trend_category, active=True).order_by('-publish')[:1]\n    return {'post_trend': post_trend, 'trend_category': trend_category }\ndef get_all_trending_posts(request):\n    all_trend_post = Post.objects.filter(category__name='Trending News', active=True).order_by('-publish')[:9]\n    return {'all_trend_post': all_trend_post} \ndef get_one_buisness_news(request):\n    buisness_category = Category.objects.get(name='Buisness')\n    buisness_trend = Post.objects.filter(category=buisness_category, active=True).order_by('-publish')[:1]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_all_trending_posts",
        "kind": 2,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "def get_all_trending_posts(request):\n    all_trend_post = Post.objects.filter(category__name='Trending News', active=True).order_by('-publish')[:9]\n    return {'all_trend_post': all_trend_post} \ndef get_one_buisness_news(request):\n    buisness_category = Category.objects.get(name='Buisness')\n    buisness_trend = Post.objects.filter(category=buisness_category, active=True).order_by('-publish')[:1]\n    return {'buisness_trend': buisness_trend, 'buisness_category': buisness_category }\ndef get_all_buisness_posts(request):\n    all_buisness_post = Post.objects.filter(category__name='Buisness', active=True).order_by('-publish')[:9]\n    return {'all_buisness_post': all_buisness_post}     ",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import get_all_trending_posts\n```\n\n```python\n\n\n```\n\n```python\ndef get_all_trending_posts(request):\n    all_trend_post = Post.objects.filter(category__name='Trending News', active=True).order_by('-publish')[:9]\n    return {'all_trend_post': all_trend_post} \ndef get_one_buisness_news(request):\n    buisness_category = Category.objects.get(name='Buisness')\n    buisness_trend = Post.objects.filter(category=buisness_category, active=True).order_by('-publish')[:1]\n    return {'buisness_trend': buisness_trend, 'buisness_category': buisness_category }\ndef get_all_buisness_posts(request):\n    all_buisness_post = Post.objects.filter(category__name='Buisness', active=True).order_by('-publish')[:9]\n    return {'all_buisness_post': all_buisness_post}     \n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_one_buisness_news",
        "kind": 2,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "def get_one_buisness_news(request):\n    buisness_category = Category.objects.get(name='Buisness')\n    buisness_trend = Post.objects.filter(category=buisness_category, active=True).order_by('-publish')[:1]\n    return {'buisness_trend': buisness_trend, 'buisness_category': buisness_category }\ndef get_all_buisness_posts(request):\n    all_buisness_post = Post.objects.filter(category__name='Buisness', active=True).order_by('-publish')[:9]\n    return {'all_buisness_post': all_buisness_post}     \ndef get_one_sports_news(request):\n    sports_category = Category.objects.get(name='Sports')\n    sports_trend = Post.objects.filter(category=sports_category, active=True).order_by('-publish')[:1]",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import get_one_buisness_news\n```\n\n```python\n\n\n```\n\n```python\ndef get_one_buisness_news(request):\n    buisness_category = Category.objects.get(name='Buisness')\n    buisness_trend = Post.objects.filter(category=buisness_category, active=True).order_by('-publish')[:1]\n    return {'buisness_trend': buisness_trend, 'buisness_category': buisness_category }\ndef get_all_buisness_posts(request):\n    all_buisness_post = Post.objects.filter(category__name='Buisness', active=True).order_by('-publish')[:9]\n    return {'all_buisness_post': all_buisness_post}     \ndef get_one_sports_news(request):\n    sports_category = Category.objects.get(name='Sports')\n    sports_trend = Post.objects.filter(category=sports_category, active=True).order_by('-publish')[:1]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_all_buisness_posts",
        "kind": 2,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "def get_all_buisness_posts(request):\n    all_buisness_post = Post.objects.filter(category__name='Buisness', active=True).order_by('-publish')[:9]\n    return {'all_buisness_post': all_buisness_post}     \ndef get_one_sports_news(request):\n    sports_category = Category.objects.get(name='Sports')\n    sports_trend = Post.objects.filter(category=sports_category, active=True).order_by('-publish')[:1]\n    return {'sports_trend': sports_trend, 'sports_category': sports_category }\ndef get_all_sports_posts(request):\n    all_sports_post = Post.objects.filter(category__name='Sports', active=True).order_by('-publish')[:9]\n    return {'all_sports_post': all_sports_post} ",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import get_all_buisness_posts\n```\n\n```python\n\n\n```\n\n```python\ndef get_all_buisness_posts(request):\n    all_buisness_post = Post.objects.filter(category__name='Buisness', active=True).order_by('-publish')[:9]\n    return {'all_buisness_post': all_buisness_post}     \ndef get_one_sports_news(request):\n    sports_category = Category.objects.get(name='Sports')\n    sports_trend = Post.objects.filter(category=sports_category, active=True).order_by('-publish')[:1]\n    return {'sports_trend': sports_trend, 'sports_category': sports_category }\ndef get_all_sports_posts(request):\n    all_sports_post = Post.objects.filter(category__name='Sports', active=True).order_by('-publish')[:9]\n    return {'all_sports_post': all_sports_post} \n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_one_sports_news",
        "kind": 2,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "def get_one_sports_news(request):\n    sports_category = Category.objects.get(name='Sports')\n    sports_trend = Post.objects.filter(category=sports_category, active=True).order_by('-publish')[:1]\n    return {'sports_trend': sports_trend, 'sports_category': sports_category }\ndef get_all_sports_posts(request):\n    all_sports_post = Post.objects.filter(category__name='Sports', active=True).order_by('-publish')[:9]\n    return {'all_sports_post': all_sports_post} \ndef get_one_international(request):\n    one_international_category = Category.objects.get(name='International News')\n    post_international = Post.objects.filter(category=one_international_category, active=True).order_by('-publish')[:1]",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import get_one_sports_news\n```\n\n```python\n\n\n```\n\n```python\ndef get_one_sports_news(request):\n    sports_category = Category.objects.get(name='Sports')\n    sports_trend = Post.objects.filter(category=sports_category, active=True).order_by('-publish')[:1]\n    return {'sports_trend': sports_trend, 'sports_category': sports_category }\ndef get_all_sports_posts(request):\n    all_sports_post = Post.objects.filter(category__name='Sports', active=True).order_by('-publish')[:9]\n    return {'all_sports_post': all_sports_post} \ndef get_one_international(request):\n    one_international_category = Category.objects.get(name='International News')\n    post_international = Post.objects.filter(category=one_international_category, active=True).order_by('-publish')[:1]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_all_sports_posts",
        "kind": 2,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "def get_all_sports_posts(request):\n    all_sports_post = Post.objects.filter(category__name='Sports', active=True).order_by('-publish')[:9]\n    return {'all_sports_post': all_sports_post} \ndef get_one_international(request):\n    one_international_category = Category.objects.get(name='International News')\n    post_international = Post.objects.filter(category=one_international_category, active=True).order_by('-publish')[:1]\n    return {'post_international': post_international, 'one_international_category': one_international_category}\ndef get_all_international(request):\n    all_international = Post.objects.filter(category__name='International News', active=True).order_by('-publish')[:9]\n    return {'all_international': all_international }",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import get_all_sports_posts\n```\n\n```python\n\n\n```\n\n```python\ndef get_all_sports_posts(request):\n    all_sports_post = Post.objects.filter(category__name='Sports', active=True).order_by('-publish')[:9]\n    return {'all_sports_post': all_sports_post} \ndef get_one_international(request):\n    one_international_category = Category.objects.get(name='International News')\n    post_international = Post.objects.filter(category=one_international_category, active=True).order_by('-publish')[:1]\n    return {'post_international': post_international, 'one_international_category': one_international_category}\ndef get_all_international(request):\n    all_international = Post.objects.filter(category__name='International News', active=True).order_by('-publish')[:9]\n    return {'all_international': all_international }\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_one_international",
        "kind": 2,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "def get_one_international(request):\n    one_international_category = Category.objects.get(name='International News')\n    post_international = Post.objects.filter(category=one_international_category, active=True).order_by('-publish')[:1]\n    return {'post_international': post_international, 'one_international_category': one_international_category}\ndef get_all_international(request):\n    all_international = Post.objects.filter(category__name='International News', active=True).order_by('-publish')[:9]\n    return {'all_international': all_international }\ndef get_one_health_news(request):\n    health_category = Category.objects.get(name='Health')\n    post_health = Post.objects.filter(category=health_category, active=True).order_by('-publish')[:1]",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import get_one_international\n```\n\n```python\n\n\n```\n\n```python\ndef get_one_international(request):\n    one_international_category = Category.objects.get(name='International News')\n    post_international = Post.objects.filter(category=one_international_category, active=True).order_by('-publish')[:1]\n    return {'post_international': post_international, 'one_international_category': one_international_category}\ndef get_all_international(request):\n    all_international = Post.objects.filter(category__name='International News', active=True).order_by('-publish')[:9]\n    return {'all_international': all_international }\ndef get_one_health_news(request):\n    health_category = Category.objects.get(name='Health')\n    post_health = Post.objects.filter(category=health_category, active=True).order_by('-publish')[:1]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_all_international",
        "kind": 2,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "def get_all_international(request):\n    all_international = Post.objects.filter(category__name='International News', active=True).order_by('-publish')[:9]\n    return {'all_international': all_international }\ndef get_one_health_news(request):\n    health_category = Category.objects.get(name='Health')\n    post_health = Post.objects.filter(category=health_category, active=True).order_by('-publish')[:1]\n    return {'post_health': post_health, 'health_category': health_category }\ndef get_all_health(request):\n    all_health_post = Post.objects.filter(category__name='Health', active=True).order_by('-publish')[:9]\n    return {'all_health_post': all_health_post} ",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import get_all_international\n```\n\n```python\n\n\n```\n\n```python\ndef get_all_international(request):\n    all_international = Post.objects.filter(category__name='International News', active=True).order_by('-publish')[:9]\n    return {'all_international': all_international }\ndef get_one_health_news(request):\n    health_category = Category.objects.get(name='Health')\n    post_health = Post.objects.filter(category=health_category, active=True).order_by('-publish')[:1]\n    return {'post_health': post_health, 'health_category': health_category }\ndef get_all_health(request):\n    all_health_post = Post.objects.filter(category__name='Health', active=True).order_by('-publish')[:9]\n    return {'all_health_post': all_health_post} \n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_one_health_news",
        "kind": 2,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "def get_one_health_news(request):\n    health_category = Category.objects.get(name='Health')\n    post_health = Post.objects.filter(category=health_category, active=True).order_by('-publish')[:1]\n    return {'post_health': post_health, 'health_category': health_category }\ndef get_all_health(request):\n    all_health_post = Post.objects.filter(category__name='Health', active=True).order_by('-publish')[:9]\n    return {'all_health_post': all_health_post} \ndef trending_news(request):\n    trend_category = Category.objects.get(name='Trending News')\n    post_trend_news = Post.objects.filter(category=trend_category, active=True).order_by('-publish')[:5]",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import get_one_health_news\n```\n\n```python\n\n\n```\n\n```python\ndef get_one_health_news(request):\n    health_category = Category.objects.get(name='Health')\n    post_health = Post.objects.filter(category=health_category, active=True).order_by('-publish')[:1]\n    return {'post_health': post_health, 'health_category': health_category }\ndef get_all_health(request):\n    all_health_post = Post.objects.filter(category__name='Health', active=True).order_by('-publish')[:9]\n    return {'all_health_post': all_health_post} \ndef trending_news(request):\n    trend_category = Category.objects.get(name='Trending News')\n    post_trend_news = Post.objects.filter(category=trend_category, active=True).order_by('-publish')[:5]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_all_health",
        "kind": 2,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "def get_all_health(request):\n    all_health_post = Post.objects.filter(category__name='Health', active=True).order_by('-publish')[:9]\n    return {'all_health_post': all_health_post} \ndef trending_news(request):\n    trend_category = Category.objects.get(name='Trending News')\n    post_trend_news = Post.objects.filter(category=trend_category, active=True).order_by('-publish')[:5]\n    return {'post_trend_news': post_trend_news, 'trend_category': trend_category }\ndef get_latest_posts(request):\n    all_latest_post = Post.objects.filter(active=True).order_by('-publish')[:5]\n    return {'all_latest_post': all_latest_post}       ",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import get_all_health\n```\n\n```python\n\n\n```\n\n```python\ndef get_all_health(request):\n    all_health_post = Post.objects.filter(category__name='Health', active=True).order_by('-publish')[:9]\n    return {'all_health_post': all_health_post} \ndef trending_news(request):\n    trend_category = Category.objects.get(name='Trending News')\n    post_trend_news = Post.objects.filter(category=trend_category, active=True).order_by('-publish')[:5]\n    return {'post_trend_news': post_trend_news, 'trend_category': trend_category }\ndef get_latest_posts(request):\n    all_latest_post = Post.objects.filter(active=True).order_by('-publish')[:5]\n    return {'all_latest_post': all_latest_post}       \n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "trending_news",
        "kind": 2,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "def trending_news(request):\n    trend_category = Category.objects.get(name='Trending News')\n    post_trend_news = Post.objects.filter(category=trend_category, active=True).order_by('-publish')[:5]\n    return {'post_trend_news': post_trend_news, 'trend_category': trend_category }\ndef get_latest_posts(request):\n    all_latest_post = Post.objects.filter(active=True).order_by('-publish')[:5]\n    return {'all_latest_post': all_latest_post}       \nclass OwnerMixin:\n    def get_queryset(self):\n        qs = super().get_queryset()",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import trending_news\n```\n\n```python\n\n\n```\n\n```python\ndef trending_news(request):\n    trend_category = Category.objects.get(name='Trending News')\n    post_trend_news = Post.objects.filter(category=trend_category, active=True).order_by('-publish')[:5]\n    return {'post_trend_news': post_trend_news, 'trend_category': trend_category }\ndef get_latest_posts(request):\n    all_latest_post = Post.objects.filter(active=True).order_by('-publish')[:5]\n    return {'all_latest_post': all_latest_post}       \nclass OwnerMixin:\n    def get_queryset(self):\n        qs = super().get_queryset()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_latest_posts",
        "kind": 2,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "def get_latest_posts(request):\n    all_latest_post = Post.objects.filter(active=True).order_by('-publish')[:5]\n    return {'all_latest_post': all_latest_post}       \nclass OwnerMixin:\n    def get_queryset(self):\n        qs = super().get_queryset()\n        return qs.filter(author__user=self.request.user).order_by('-publish')\nclass OwnerEditMixin:\n    def form_valid(self, form):\n        author = Author.objects.get_or_create(user=self.request.user)[0]",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import get_latest_posts\n```\n\n```python\n\n\n```\n\n```python\ndef get_latest_posts(request):\n    all_latest_post = Post.objects.filter(active=True).order_by('-publish')[:5]\n    return {'all_latest_post': all_latest_post}       \nclass OwnerMixin:\n    def get_queryset(self):\n        qs = super().get_queryset()\n        return qs.filter(author__user=self.request.user).order_by('-publish')\nclass OwnerEditMixin:\n    def form_valid(self, form):\n        author = Author.objects.get_or_create(user=self.request.user)[0]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "create_post",
        "kind": 2,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "def create_post(request):\n    author = Author.objects.get(user=request.user)\n    if request.method == 'POST':\n        form_post = PostForm(request.POST, request.FILES)\n        if form_post.is_valid():\n            user_author = form_post.save(commit=False)\n            user_author.author = author\n            user_author.save()\n            messages.success(request, 'POST CREATED SUCCESFULLY')\n            return redirect('manage_post_list')",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import create_post\n```\n\n```python\n\n\n```\n\n```python\ndef create_post(request):\n    author = Author.objects.get(user=request.user)\n    if request.method == 'POST':\n        form_post = PostForm(request.POST, request.FILES)\n        if form_post.is_valid():\n            user_author = form_post.save(commit=False)\n            user_author.author = author\n            user_author.save()\n            messages.success(request, 'POST CREATED SUCCESFULLY')\n            return redirect('manage_post_list')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "edit_post",
        "kind": 2,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "def edit_post(request, id):\n    author = Author.objects.get(user=request.user)\n    post_update = Post.objects.get(id=id, author=author)\n    if request.method == 'POST':\n        form_post = PostForm(instance=post_update,  data=request.POST, files= request.FILES)\n        if form_post.is_valid():\n            user_author = form_post.save(commit=False)\n            user_author.author = author\n            user_author.save()\n            messages.success(request, 'POST UPDATED SUCCESFULLY')",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import edit_post\n```\n\n```python\n\n\n```\n\n```python\ndef edit_post(request, id):\n    author = Author.objects.get(user=request.user)\n    post_update = Post.objects.get(id=id, author=author)\n    if request.method == 'POST':\n        form_post = PostForm(instance=post_update,  data=request.POST, files= request.FILES)\n        if form_post.is_valid():\n            user_author = form_post.save(commit=False)\n            user_author.author = author\n            user_author.save()\n            messages.success(request, 'POST UPDATED SUCCESFULLY')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Author_Form",
        "kind": 2,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "def Author_Form(request):\n    if request.user.is_authenticated:\n        user = request.user\n        author = Author.objects.filter(user=user)\n        if author.exists():\n            return redirect('manage_post_list')\n        else:\n            pass\n        if request.method == 'POST':\n            author_form = AuthorForm(request.POST)",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import Author_Form\n```\n\n```python\n\n\n```\n\n```python\ndef Author_Form(request):\n    if request.user.is_authenticated:\n        user = request.user\n        author = Author.objects.filter(user=user)\n        if author.exists():\n            return redirect('manage_post_list')\n        else:\n            pass\n        if request.method == 'POST':\n            author_form = AuthorForm(request.POST)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "get_post_name",
        "kind": 2,
        "importPath": "news.views",
        "description": "news.views",
        "peekOfCode": "def get_post_name(request):\n    post_name = request.session.get('post_title', None)\n    return {'post_name': post_name}",
        "detail": "news.views",
        "documentation": {
            "value": "\n```python\nfrom news.views import get_post_name\n```\n\n```python\n\n\n```\n\n```python\ndef get_post_name(request):\n    post_name = request.session.get('post_title', None)\n    return {'post_name': post_name}\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "newsletter.migrations.0001_initial",
        "description": "newsletter.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Subscribers',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('email', models.EmailField(db_index=True, max_length=254, unique=True)),",
        "detail": "newsletter.migrations.0001_initial",
        "documentation": {
            "value": "\n```python\nfrom newsletter.migrations.0001_initial import Migration\n```\n\n```python\n\n\n```\n\n```python\nclass Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Subscribers',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('email', models.EmailField(db_index=True, max_length=254, unique=True)),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EmailTemplateAdminForm",
        "kind": 6,
        "importPath": "newsletter.admin",
        "description": "newsletter.admin",
        "peekOfCode": "class EmailTemplateAdminForm(forms.ModelForm):\n    class Meta:\n        model = EmailTemplate\n        fields = \"__all__\"\n        widgets =  {\n            'message': RichTextFormField(),\n        }\nclass EmailTemplateAdmin(admin.ModelAdmin):\n    form = EmailTemplateAdminForm\n    def save_model(self, request, obj, form, change):",
        "detail": "newsletter.admin",
        "documentation": {
            "value": "\n```python\nfrom newsletter.admin import EmailTemplateAdminForm\n```\n\n```python\n\n\n```\n\n```python\nclass EmailTemplateAdminForm(forms.ModelForm):\n    class Meta:\n        model = EmailTemplate\n        fields = \"__all__\"\n        widgets =  {\n            'message': RichTextFormField(),\n        }\nclass EmailTemplateAdmin(admin.ModelAdmin):\n    form = EmailTemplateAdminForm\n    def save_model(self, request, obj, form, change):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EmailTemplateAdmin",
        "kind": 6,
        "importPath": "newsletter.admin",
        "description": "newsletter.admin",
        "peekOfCode": "class EmailTemplateAdmin(admin.ModelAdmin):\n    form = EmailTemplateAdminForm\n    def save_model(self, request, obj, form, change):\n        super().save_model(request, obj, form, change)\n        subject = obj.subject\n        html_message = obj.message\n        recipients = [subscriber.email for subscriber in obj.recipients.all()]\n        from_email = settings.EMAIL_HOST_USER\n        send_mail(subject, \"\", from_email, recipients, fail_silently=False, html_message=html_message)\nadmin.site.register(EmailTemplate, EmailTemplateAdmin)",
        "detail": "newsletter.admin",
        "documentation": {
            "value": "\n```python\nfrom newsletter.admin import EmailTemplateAdmin\n```\n\n```python\n\n\n```\n\n```python\nclass EmailTemplateAdmin(admin.ModelAdmin):\n    form = EmailTemplateAdminForm\n    def save_model(self, request, obj, form, change):\n        super().save_model(request, obj, form, change)\n        subject = obj.subject\n        html_message = obj.message\n        recipients = [subscriber.email for subscriber in obj.recipients.all()]\n        from_email = settings.EMAIL_HOST_USER\n        send_mail(subject, \"\", from_email, recipients, fail_silently=False, html_message=html_message)\nadmin.site.register(EmailTemplate, EmailTemplateAdmin)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "NewsletterConfig",
        "kind": 6,
        "importPath": "newsletter.apps",
        "description": "newsletter.apps",
        "peekOfCode": "class NewsletterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'newsletter'",
        "detail": "newsletter.apps",
        "documentation": {
            "value": "\n```python\nfrom newsletter.apps import NewsletterConfig\n```\n\n```python\n\n\n```\n\n```python\nclass NewsletterConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'newsletter'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SubscriberForm",
        "kind": 6,
        "importPath": "newsletter.forms",
        "description": "newsletter.forms",
        "peekOfCode": "class SubscriberForm(forms.ModelForm):\n    class Meta:\n        model = Subscribers\n        fields = ['email']",
        "detail": "newsletter.forms",
        "documentation": {
            "value": "\n```python\nfrom newsletter.forms import SubscriberForm\n```\n\n```python\n\n\n```\n\n```python\nclass SubscriberForm(forms.ModelForm):\n    class Meta:\n        model = Subscribers\n        fields = ['email']\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Subscribers",
        "kind": 6,
        "importPath": "newsletter.models",
        "description": "newsletter.models",
        "peekOfCode": "class Subscribers(models.Model):\n    email = models.EmailField(unique=True, db_index=True)\n    def __str__(self):\n        return self.email\nclass EmailTemplate(models.Model):\n    subject = models.CharField(max_length=256)\n    message =   RichTextField()\n    recipients = models.ManyToManyField(Subscribers)  \n    def __str__(self):\n        return self.subject",
        "detail": "newsletter.models",
        "documentation": {
            "value": "\n```python\nfrom newsletter.models import Subscribers\n```\n\n```python\n\n\n```\n\n```python\nclass Subscribers(models.Model):\n    email = models.EmailField(unique=True, db_index=True)\n    def __str__(self):\n        return self.email\nclass EmailTemplate(models.Model):\n    subject = models.CharField(max_length=256)\n    message =   RichTextField()\n    recipients = models.ManyToManyField(Subscribers)  \n    def __str__(self):\n        return self.subject\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EmailTemplate",
        "kind": 6,
        "importPath": "newsletter.models",
        "description": "newsletter.models",
        "peekOfCode": "class EmailTemplate(models.Model):\n    subject = models.CharField(max_length=256)\n    message =   RichTextField()\n    recipients = models.ManyToManyField(Subscribers)  \n    def __str__(self):\n        return self.subject",
        "detail": "newsletter.models",
        "documentation": {
            "value": "\n```python\nfrom newsletter.models import EmailTemplate\n```\n\n```python\n\n\n```\n\n```python\nclass EmailTemplate(models.Model):\n    subject = models.CharField(max_length=256)\n    message =   RichTextField()\n    recipients = models.ManyToManyField(Subscribers)  \n    def __str__(self):\n        return self.subject\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "newsletter.urls",
        "description": "newsletter.urls",
        "peekOfCode": "urlpatterns = [\n    path('subscribe/', views.index, name='index'),\n]",
        "detail": "newsletter.urls",
        "documentation": {
            "value": "\n```python\nfrom newsletter.urls import urlpatterns\n```\n\n```python\n\n\n```\n\n```python\nurlpatterns = [\n    path('subscribe/', views.index, name='index'),\n]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "subscribe_email",
        "kind": 2,
        "importPath": "newsletter.views",
        "description": "newsletter.views",
        "peekOfCode": "def subscribe_email(request):\n    forms = SubscriberForm()        \n    return {'forms': forms }    \n@require_POST\ndef index(request):\n    context = None\n    form = SubscriberForm(request.POST)\n    if form.is_valid():\n        subscriber = form.save()\n        context = {'email': subscriber.email, 'form': form }",
        "detail": "newsletter.views",
        "documentation": {
            "value": "\n```python\nfrom newsletter.views import subscribe_email\n```\n\n```python\n\n\n```\n\n```python\ndef subscribe_email(request):\n    forms = SubscriberForm()        \n    return {'forms': forms }    \n@require_POST\ndef index(request):\n    context = None\n    form = SubscriberForm(request.POST)\n    if form.is_valid():\n        subscriber = form.save()\n        context = {'email': subscriber.email, 'form': form }\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "newsletter.views",
        "description": "newsletter.views",
        "peekOfCode": "def index(request):\n    context = None\n    form = SubscriberForm(request.POST)\n    if form.is_valid():\n        subscriber = form.save()\n        context = {'email': subscriber.email, 'form': form }\n        email_content = render_to_string('news/subscribe_thank_you.html', context)\n        email_subject = 'Thank You For Subscribing'\n        recipient_list = [subscriber.email]\n        from_email = settings.EMAIL_HOST_USER",
        "detail": "newsletter.views",
        "documentation": {
            "value": "\n```python\nfrom newsletter.views import index\n```\n\n```python\n\n\n```\n\n```python\ndef index(request):\n    context = None\n    form = SubscriberForm(request.POST)\n    if form.is_valid():\n        subscriber = form.save()\n        context = {'email': subscriber.email, 'form': form }\n        email_content = render_to_string('news/subscribe_thank_you.html', context)\n        email_subject = 'Thank You For Subscribing'\n        recipient_list = [subscriber.email]\n        from_email = settings.EMAIL_HOST_USER\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "newspaper.asgi",
        "description": "newspaper.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "newspaper.asgi",
        "documentation": {
            "value": "\n```python\nfrom newspaper.asgi import application\n```\n\n```python\n\n\n```\n\n```python\napplication = get_asgi_application()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get('SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = [\"*\"]\n# Application definition\nINSTALLED_APPS = [",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import BASE_DIR\n```\n\n```python\n\n\n```\n\n```python\nBASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = os.environ.get('SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = [\"*\"]\n# Application definition\nINSTALLED_APPS = [\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "SECRET_KEY = os.environ.get('SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = [\"*\"]\n# Application definition\nINSTALLED_APPS = [\n    'jazzmin',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import SECRET_KEY\n```\n\n```python\n\n\n```\n\n```python\nSECRET_KEY = os.environ.get('SECRET_KEY')\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = [\"*\"]\n# Application definition\nINSTALLED_APPS = [\n    'jazzmin',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = [\"*\"]\n# Application definition\nINSTALLED_APPS = [\n    'jazzmin',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import DEBUG\n```\n\n```python\n\n\n```\n\n```python\nDEBUG = True\nALLOWED_HOSTS = [\"*\"]\n# Application definition\nINSTALLED_APPS = [\n    'jazzmin',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "ALLOWED_HOSTS = [\"*\"]\n# Application definition\nINSTALLED_APPS = [\n    'jazzmin',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import ALLOWED_HOSTS\n```\n\n```python\n\n\n```\n\n```python\nALLOWED_HOSTS = [\"*\"]\n# Application definition\nINSTALLED_APPS = [\n    'jazzmin',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'jazzmin',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'news.apps.NewsConfig',\n    'users.apps.UsersConfig',",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import INSTALLED_APPS\n```\n\n```python\n\n\n```\n\n```python\nINSTALLED_APPS = [\n    'jazzmin',\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'news.apps.NewsConfig',\n    'users.apps.UsersConfig',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'whitenoise.middleware.WhiteNoiseMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import MIDDLEWARE\n```\n\n```python\n\n\n```\n\n```python\nMIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'whitenoise.middleware.WhiteNoiseMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "ROOT_URLCONF = 'newspaper.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import ROOT_URLCONF\n```\n\n```python\n\n\n```\n\n```python\nROOT_URLCONF = 'newspaper.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import TEMPLATES\n```\n\n```python\n\n\n```\n\n```python\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [os.path.join(BASE_DIR, 'templates')],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "WSGI_APPLICATION = 'newspaper.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\n#DATABASES = {\n    #'default': {\n        #'ENGINE': 'django.db.backends.postgresql_psycopg2',\n        #'NAME': os.environ.get('DB_NAME'),\n        #'USER': os.environ.get('DB_USER'),\n        #'PASSWORD': os.environ.get('DB_PASSWORD'),\n        #'HOST': os.environ.get('DB_HOST'),",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import WSGI_APPLICATION\n```\n\n```python\n\n\n```\n\n```python\nWSGI_APPLICATION = 'newspaper.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/5.0/ref/settings/#databases\n#DATABASES = {\n    #'default': {\n        #'ENGINE': 'django.db.backends.postgresql_psycopg2',\n        #'NAME': os.environ.get('DB_NAME'),\n        #'USER': os.environ.get('DB_USER'),\n        #'PASSWORD': os.environ.get('DB_PASSWORD'),\n        #'HOST': os.environ.get('DB_HOST'),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#DATABASES",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "#DATABASES = {\n    #'default': {\n        #'ENGINE': 'django.db.backends.postgresql_psycopg2',\n        #'NAME': os.environ.get('DB_NAME'),\n        #'USER': os.environ.get('DB_USER'),\n        #'PASSWORD': os.environ.get('DB_PASSWORD'),\n        #'HOST': os.environ.get('DB_HOST'),\n        #'PORT': os.environ.get('DB_PORT'),\n    #}\n#}",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import #DATABASES\n```\n\n```python\n\n\n```\n\n```python\n#DATABASES = {\n    #'default': {\n        #'ENGINE': 'django.db.backends.postgresql_psycopg2',\n        #'NAME': os.environ.get('DB_NAME'),\n        #'USER': os.environ.get('DB_USER'),\n        #'PASSWORD': os.environ.get('DB_PASSWORD'),\n        #'HOST': os.environ.get('DB_HOST'),\n        #'PORT': os.environ.get('DB_PORT'),\n    #}\n#}\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "DATABASES = {\n    'default': dj_database_url.config(\n        default='postgresql://postgres:1232478847@localhost:5432/emma',\n        conn_max_age=600\n    )\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import DATABASES\n```\n\n```python\n\n\n```\n\n```python\nDATABASES = {\n    'default': dj_database_url.config(\n        default='postgresql://postgres:1232478847@localhost:5432/emma',\n        conn_max_age=600\n    )\n}\n# Password validation\n# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import AUTH_PASSWORD_VALIDATORS\n```\n\n```python\n\n\n```\n\n```python\nAUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\nAUTH_USER_MODEL = 'users.User'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n# This setting informs Django of the URI path from which your static files will be served to users",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import LANGUAGE_CODE\n```\n\n```python\n\n\n```\n\n```python\nLANGUAGE_CODE = 'en-us'\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\nAUTH_USER_MODEL = 'users.User'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n# This setting informs Django of the URI path from which your static files will be served to users\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "TIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\nAUTH_USER_MODEL = 'users.User'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n# This setting informs Django of the URI path from which your static files will be served to users\n# Here, they well be accessible at your-domain.onrender.com/static/... or yourcustomdomain.com/static/...",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import TIME_ZONE\n```\n\n```python\n\n\n```\n\n```python\nTIME_ZONE = 'UTC'\nUSE_I18N = True\nUSE_TZ = True\nAUTH_USER_MODEL = 'users.User'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n# This setting informs Django of the URI path from which your static files will be served to users\n# Here, they well be accessible at your-domain.onrender.com/static/... or yourcustomdomain.com/static/...\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "USE_I18N = True\nUSE_TZ = True\nAUTH_USER_MODEL = 'users.User'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n# This setting informs Django of the URI path from which your static files will be served to users\n# Here, they well be accessible at your-domain.onrender.com/static/... or yourcustomdomain.com/static/...\nSTATIC_URL = '/static/'",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import USE_I18N\n```\n\n```python\n\n\n```\n\n```python\nUSE_I18N = True\nUSE_TZ = True\nAUTH_USER_MODEL = 'users.User'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n# This setting informs Django of the URI path from which your static files will be served to users\n# Here, they well be accessible at your-domain.onrender.com/static/... or yourcustomdomain.com/static/...\nSTATIC_URL = '/static/'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "USE_TZ = True\nAUTH_USER_MODEL = 'users.User'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n# This setting informs Django of the URI path from which your static files will be served to users\n# Here, they well be accessible at your-domain.onrender.com/static/... or yourcustomdomain.com/static/...\nSTATIC_URL = '/static/'\n# This setting will be used in production",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import USE_TZ\n```\n\n```python\n\n\n```\n\n```python\nUSE_TZ = True\nAUTH_USER_MODEL = 'users.User'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n# This setting informs Django of the URI path from which your static files will be served to users\n# Here, they well be accessible at your-domain.onrender.com/static/... or yourcustomdomain.com/static/...\nSTATIC_URL = '/static/'\n# This setting will be used in production\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "AUTH_USER_MODEL",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "AUTH_USER_MODEL = 'users.User'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n# This setting informs Django of the URI path from which your static files will be served to users\n# Here, they well be accessible at your-domain.onrender.com/static/... or yourcustomdomain.com/static/...\nSTATIC_URL = '/static/'\n# This setting will be used in production\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import AUTH_USER_MODEL\n```\n\n```python\n\n\n```\n\n```python\nAUTH_USER_MODEL = 'users.User'\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/5.0/howto/static-files/\n# This setting informs Django of the URI path from which your static files will be served to users\n# Here, they well be accessible at your-domain.onrender.com/static/... or yourcustomdomain.com/static/...\nSTATIC_URL = '/static/'\n# This setting will be used in production\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "STATIC_URL = '/static/'\n# This setting will be used in production\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# This setting will be used during development\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n# Configure static file storage for production\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\n# This production code might break development mode, so we check whether we're in DEBUG mode",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import STATIC_URL\n```\n\n```python\n\n\n```\n\n```python\nSTATIC_URL = '/static/'\n# This setting will be used in production\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# This setting will be used during development\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n# Configure static file storage for production\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\n# This production code might break development mode, so we check whether we're in DEBUG mode\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "STATIC_ROOT",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# This setting will be used during development\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n# Configure static file storage for production\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\n# This production code might break development mode, so we check whether we're in DEBUG mode\nif not DEBUG:\n    # Tell Django to copy static assets into a path called `staticfiles` (this is specific to Render)",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import STATIC_ROOT\n```\n\n```python\n\n\n```\n\n```python\nSTATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n# This setting will be used during development\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n# Configure static file storage for production\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\n# This production code might break development mode, so we check whether we're in DEBUG mode\nif not DEBUG:\n    # Tell Django to copy static assets into a path called `staticfiles` (this is specific to Render)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "STATICFILES_DIRS",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "STATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n# Configure static file storage for production\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\n# This production code might break development mode, so we check whether we're in DEBUG mode\nif not DEBUG:\n    # Tell Django to copy static assets into a path called `staticfiles` (this is specific to Render)\n    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n    # Enable the WhiteNoise storage backend, which compresses static files to reduce disk use",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import STATICFILES_DIRS\n```\n\n```python\n\n\n```\n\n```python\nSTATICFILES_DIRS = [\n    os.path.join(BASE_DIR, 'static'),\n]\n# Configure static file storage for production\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\n# This production code might break development mode, so we check whether we're in DEBUG mode\nif not DEBUG:\n    # Tell Django to copy static assets into a path called `staticfiles` (this is specific to Render)\n    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n    # Enable the WhiteNoise storage backend, which compresses static files to reduce disk use\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "STATICFILES_STORAGE",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\n# This production code might break development mode, so we check whether we're in DEBUG mode\nif not DEBUG:\n    # Tell Django to copy static assets into a path called `staticfiles` (this is specific to Render)\n    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n    # Enable the WhiteNoise storage backend, which compresses static files to reduce disk use\n    # and renames the files with unique names for each version to support long-term caching\n    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\nMEDIA_URL = 'media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import STATICFILES_STORAGE\n```\n\n```python\n\n\n```\n\n```python\nSTATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\n# This production code might break development mode, so we check whether we're in DEBUG mode\nif not DEBUG:\n    # Tell Django to copy static assets into a path called `staticfiles` (this is specific to Render)\n    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')\n    # Enable the WhiteNoise storage backend, which compresses static files to reduce disk use\n    # and renames the files with unique names for each version to support long-term caching\n    STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'\nMEDIA_URL = 'media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MEDIA_URL",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "MEDIA_URL = 'media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCKEDITOR_UPLOAD_PATH = 'content/ckeditor/'\nCKEDITOR_CONFIGS = {\n    'default': {\n        'skin': 'moono',\n        # 'skin': 'office2013',",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import MEDIA_URL\n```\n\n```python\n\n\n```\n\n```python\nMEDIA_URL = 'media/'\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCKEDITOR_UPLOAD_PATH = 'content/ckeditor/'\nCKEDITOR_CONFIGS = {\n    'default': {\n        'skin': 'moono',\n        # 'skin': 'office2013',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MEDIA_ROOT",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "MEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCKEDITOR_UPLOAD_PATH = 'content/ckeditor/'\nCKEDITOR_CONFIGS = {\n    'default': {\n        'skin': 'moono',\n        # 'skin': 'office2013',\n        'toolbar_Basic': [",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import MEDIA_ROOT\n```\n\n```python\n\n\n```\n\n```python\nMEDIA_ROOT = os.path.join(BASE_DIR, 'media')\n# Default primary key field type\n# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCKEDITOR_UPLOAD_PATH = 'content/ckeditor/'\nCKEDITOR_CONFIGS = {\n    'default': {\n        'skin': 'moono',\n        # 'skin': 'office2013',\n        'toolbar_Basic': [\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCKEDITOR_UPLOAD_PATH = 'content/ckeditor/'\nCKEDITOR_CONFIGS = {\n    'default': {\n        'skin': 'moono',\n        # 'skin': 'office2013',\n        'toolbar_Basic': [\n            ['Source', '-', 'Bold', 'Italic']\n        ],\n        'toolbar_YourCustomToolbarConfig': [",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import DEFAULT_AUTO_FIELD\n```\n\n```python\n\n\n```\n\n```python\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nCKEDITOR_UPLOAD_PATH = 'content/ckeditor/'\nCKEDITOR_CONFIGS = {\n    'default': {\n        'skin': 'moono',\n        # 'skin': 'office2013',\n        'toolbar_Basic': [\n            ['Source', '-', 'Bold', 'Italic']\n        ],\n        'toolbar_YourCustomToolbarConfig': [\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CKEDITOR_UPLOAD_PATH",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "CKEDITOR_UPLOAD_PATH = 'content/ckeditor/'\nCKEDITOR_CONFIGS = {\n    'default': {\n        'skin': 'moono',\n        # 'skin': 'office2013',\n        'toolbar_Basic': [\n            ['Source', '-', 'Bold', 'Italic']\n        ],\n        'toolbar_YourCustomToolbarConfig': [\n            {'name': 'document', 'items': ['Source', '-', 'Save', 'NewPage', 'Preview', 'Print', '-', 'Templates']},",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import CKEDITOR_UPLOAD_PATH\n```\n\n```python\n\n\n```\n\n```python\nCKEDITOR_UPLOAD_PATH = 'content/ckeditor/'\nCKEDITOR_CONFIGS = {\n    'default': {\n        'skin': 'moono',\n        # 'skin': 'office2013',\n        'toolbar_Basic': [\n            ['Source', '-', 'Bold', 'Italic']\n        ],\n        'toolbar_YourCustomToolbarConfig': [\n            {'name': 'document', 'items': ['Source', '-', 'Save', 'NewPage', 'Preview', 'Print', '-', 'Templates']},\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CKEDITOR_CONFIGS",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "CKEDITOR_CONFIGS = {\n    'default': {\n        'skin': 'moono',\n        # 'skin': 'office2013',\n        'toolbar_Basic': [\n            ['Source', '-', 'Bold', 'Italic']\n        ],\n        'toolbar_YourCustomToolbarConfig': [\n            {'name': 'document', 'items': ['Source', '-', 'Save', 'NewPage', 'Preview', 'Print', '-', 'Templates']},\n            {'name': 'clipboard', 'items': ['Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'Undo', 'Redo']},",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import CKEDITOR_CONFIGS\n```\n\n```python\n\n\n```\n\n```python\nCKEDITOR_CONFIGS = {\n    'default': {\n        'skin': 'moono',\n        # 'skin': 'office2013',\n        'toolbar_Basic': [\n            ['Source', '-', 'Bold', 'Italic']\n        ],\n        'toolbar_YourCustomToolbarConfig': [\n            {'name': 'document', 'items': ['Source', '-', 'Save', 'NewPage', 'Preview', 'Print', '-', 'Templates']},\n            {'name': 'clipboard', 'items': ['Cut', 'Copy', 'Paste', 'PasteText', 'PasteFromWord', '-', 'Undo', 'Redo']},\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "SECURE_PROXY_SSL_HEADER",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\nCRISPY_ALLOWED_TEMPLATE_PACKS = \"bootstrap4\"\nCRISPY_TEMPLATE_PACK = \"bootstrap4\"\nMESSAGE_TAGS = {\n    messages.DEBUG: 'alert-info',\n    messages.INFO: 'alert-info',\n    messages.SUCCESS: 'alert-success',\n    messages.WARNING: 'alert-warning',\n    messages.ERROR: 'alert-danger',\n}",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import SECURE_PROXY_SSL_HEADER\n```\n\n```python\n\n\n```\n\n```python\nSECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\nCRISPY_ALLOWED_TEMPLATE_PACKS = \"bootstrap4\"\nCRISPY_TEMPLATE_PACK = \"bootstrap4\"\nMESSAGE_TAGS = {\n    messages.DEBUG: 'alert-info',\n    messages.INFO: 'alert-info',\n    messages.SUCCESS: 'alert-success',\n    messages.WARNING: 'alert-warning',\n    messages.ERROR: 'alert-danger',\n}\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CRISPY_ALLOWED_TEMPLATE_PACKS",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "CRISPY_ALLOWED_TEMPLATE_PACKS = \"bootstrap4\"\nCRISPY_TEMPLATE_PACK = \"bootstrap4\"\nMESSAGE_TAGS = {\n    messages.DEBUG: 'alert-info',\n    messages.INFO: 'alert-info',\n    messages.SUCCESS: 'alert-success',\n    messages.WARNING: 'alert-warning',\n    messages.ERROR: 'alert-danger',\n}\nEMBED_VIDEO_BACKENDS = (",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import CRISPY_ALLOWED_TEMPLATE_PACKS\n```\n\n```python\n\n\n```\n\n```python\nCRISPY_ALLOWED_TEMPLATE_PACKS = \"bootstrap4\"\nCRISPY_TEMPLATE_PACK = \"bootstrap4\"\nMESSAGE_TAGS = {\n    messages.DEBUG: 'alert-info',\n    messages.INFO: 'alert-info',\n    messages.SUCCESS: 'alert-success',\n    messages.WARNING: 'alert-warning',\n    messages.ERROR: 'alert-danger',\n}\nEMBED_VIDEO_BACKENDS = (\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CRISPY_TEMPLATE_PACK",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "CRISPY_TEMPLATE_PACK = \"bootstrap4\"\nMESSAGE_TAGS = {\n    messages.DEBUG: 'alert-info',\n    messages.INFO: 'alert-info',\n    messages.SUCCESS: 'alert-success',\n    messages.WARNING: 'alert-warning',\n    messages.ERROR: 'alert-danger',\n}\nEMBED_VIDEO_BACKENDS = (\n    'embed_video.backends.YoutubeBackend',",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import CRISPY_TEMPLATE_PACK\n```\n\n```python\n\n\n```\n\n```python\nCRISPY_TEMPLATE_PACK = \"bootstrap4\"\nMESSAGE_TAGS = {\n    messages.DEBUG: 'alert-info',\n    messages.INFO: 'alert-info',\n    messages.SUCCESS: 'alert-success',\n    messages.WARNING: 'alert-warning',\n    messages.ERROR: 'alert-danger',\n}\nEMBED_VIDEO_BACKENDS = (\n    'embed_video.backends.YoutubeBackend',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "MESSAGE_TAGS",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "MESSAGE_TAGS = {\n    messages.DEBUG: 'alert-info',\n    messages.INFO: 'alert-info',\n    messages.SUCCESS: 'alert-success',\n    messages.WARNING: 'alert-warning',\n    messages.ERROR: 'alert-danger',\n}\nEMBED_VIDEO_BACKENDS = (\n    'embed_video.backends.YoutubeBackend',\n    'embed_video.backends.VimeoBackend',",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import MESSAGE_TAGS\n```\n\n```python\n\n\n```\n\n```python\nMESSAGE_TAGS = {\n    messages.DEBUG: 'alert-info',\n    messages.INFO: 'alert-info',\n    messages.SUCCESS: 'alert-success',\n    messages.WARNING: 'alert-warning',\n    messages.ERROR: 'alert-danger',\n}\nEMBED_VIDEO_BACKENDS = (\n    'embed_video.backends.YoutubeBackend',\n    'embed_video.backends.VimeoBackend',\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EMBED_VIDEO_BACKENDS",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "EMBED_VIDEO_BACKENDS = (\n    'embed_video.backends.YoutubeBackend',\n    'embed_video.backends.VimeoBackend',\n    'embed_video.backends.SoundCloudBackend',\n)\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import EMBED_VIDEO_BACKENDS\n```\n\n```python\n\n\n```\n\n```python\nEMBED_VIDEO_BACKENDS = (\n    'embed_video.backends.YoutubeBackend',\n    'embed_video.backends.VimeoBackend',\n    'embed_video.backends.SoundCloudBackend',\n)\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EMAIL_BACKEND",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')\n#EMAIL_HOST = 'sandbox.smtp.mailtrap.io'\n#EMAIL_HOST_USER = 'cc69e4cc4662f1'\n#EMAIL_HOST_PASSWORD = '6c76198e89b737'\n#EMAIL_PORT = '2525'",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import EMAIL_BACKEND\n```\n\n```python\n\n\n```\n\n```python\nEMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')\n#EMAIL_HOST = 'sandbox.smtp.mailtrap.io'\n#EMAIL_HOST_USER = 'cc69e4cc4662f1'\n#EMAIL_HOST_PASSWORD = '6c76198e89b737'\n#EMAIL_PORT = '2525'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EMAIL_HOST",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "EMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')\n#EMAIL_HOST = 'sandbox.smtp.mailtrap.io'\n#EMAIL_HOST_USER = 'cc69e4cc4662f1'\n#EMAIL_HOST_PASSWORD = '6c76198e89b737'\n#EMAIL_PORT = '2525'\nCKEDITOR_UPLOAD_PATH = 'uploads/'",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import EMAIL_HOST\n```\n\n```python\n\n\n```\n\n```python\nEMAIL_HOST = 'smtp.gmail.com'\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')\n#EMAIL_HOST = 'sandbox.smtp.mailtrap.io'\n#EMAIL_HOST_USER = 'cc69e4cc4662f1'\n#EMAIL_HOST_PASSWORD = '6c76198e89b737'\n#EMAIL_PORT = '2525'\nCKEDITOR_UPLOAD_PATH = 'uploads/'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EMAIL_PORT",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "EMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')\n#EMAIL_HOST = 'sandbox.smtp.mailtrap.io'\n#EMAIL_HOST_USER = 'cc69e4cc4662f1'\n#EMAIL_HOST_PASSWORD = '6c76198e89b737'\n#EMAIL_PORT = '2525'\nCKEDITOR_UPLOAD_PATH = 'uploads/'\nCKEDITOR_IMAGE_BACKEND = 'pillow'",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import EMAIL_PORT\n```\n\n```python\n\n\n```\n\n```python\nEMAIL_PORT = 587\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')\n#EMAIL_HOST = 'sandbox.smtp.mailtrap.io'\n#EMAIL_HOST_USER = 'cc69e4cc4662f1'\n#EMAIL_HOST_PASSWORD = '6c76198e89b737'\n#EMAIL_PORT = '2525'\nCKEDITOR_UPLOAD_PATH = 'uploads/'\nCKEDITOR_IMAGE_BACKEND = 'pillow'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EMAIL_USE_TLS",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "EMAIL_USE_TLS = True\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')\n#EMAIL_HOST = 'sandbox.smtp.mailtrap.io'\n#EMAIL_HOST_USER = 'cc69e4cc4662f1'\n#EMAIL_HOST_PASSWORD = '6c76198e89b737'\n#EMAIL_PORT = '2525'\nCKEDITOR_UPLOAD_PATH = 'uploads/'\nCKEDITOR_IMAGE_BACKEND = 'pillow'\nCKEDITOR_BROWSE_SHOW_DIRS = True",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import EMAIL_USE_TLS\n```\n\n```python\n\n\n```\n\n```python\nEMAIL_USE_TLS = True\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')\n#EMAIL_HOST = 'sandbox.smtp.mailtrap.io'\n#EMAIL_HOST_USER = 'cc69e4cc4662f1'\n#EMAIL_HOST_PASSWORD = '6c76198e89b737'\n#EMAIL_PORT = '2525'\nCKEDITOR_UPLOAD_PATH = 'uploads/'\nCKEDITOR_IMAGE_BACKEND = 'pillow'\nCKEDITOR_BROWSE_SHOW_DIRS = True\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')\n#EMAIL_HOST = 'sandbox.smtp.mailtrap.io'\n#EMAIL_HOST_USER = 'cc69e4cc4662f1'\n#EMAIL_HOST_PASSWORD = '6c76198e89b737'\n#EMAIL_PORT = '2525'\nCKEDITOR_UPLOAD_PATH = 'uploads/'\nCKEDITOR_IMAGE_BACKEND = 'pillow'\nCKEDITOR_BROWSE_SHOW_DIRS = True\nCKEDITOR_ALLOW_SYMLINKED_FILES = True",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import EMAIL_HOST_USER\n```\n\n```python\n\n\n```\n\n```python\nEMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')\n#EMAIL_HOST = 'sandbox.smtp.mailtrap.io'\n#EMAIL_HOST_USER = 'cc69e4cc4662f1'\n#EMAIL_HOST_PASSWORD = '6c76198e89b737'\n#EMAIL_PORT = '2525'\nCKEDITOR_UPLOAD_PATH = 'uploads/'\nCKEDITOR_IMAGE_BACKEND = 'pillow'\nCKEDITOR_BROWSE_SHOW_DIRS = True\nCKEDITOR_ALLOW_SYMLINKED_FILES = True\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')\n#EMAIL_HOST = 'sandbox.smtp.mailtrap.io'\n#EMAIL_HOST_USER = 'cc69e4cc4662f1'\n#EMAIL_HOST_PASSWORD = '6c76198e89b737'\n#EMAIL_PORT = '2525'\nCKEDITOR_UPLOAD_PATH = 'uploads/'\nCKEDITOR_IMAGE_BACKEND = 'pillow'\nCKEDITOR_BROWSE_SHOW_DIRS = True\nCKEDITOR_ALLOW_SYMLINKED_FILES = True",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import EMAIL_HOST_PASSWORD\n```\n\n```python\n\n\n```\n\n```python\nEMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD')\n#EMAIL_HOST = 'sandbox.smtp.mailtrap.io'\n#EMAIL_HOST_USER = 'cc69e4cc4662f1'\n#EMAIL_HOST_PASSWORD = '6c76198e89b737'\n#EMAIL_PORT = '2525'\nCKEDITOR_UPLOAD_PATH = 'uploads/'\nCKEDITOR_IMAGE_BACKEND = 'pillow'\nCKEDITOR_BROWSE_SHOW_DIRS = True\nCKEDITOR_ALLOW_SYMLINKED_FILES = True\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#EMAIL_HOST",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "#EMAIL_HOST = 'sandbox.smtp.mailtrap.io'\n#EMAIL_HOST_USER = 'cc69e4cc4662f1'\n#EMAIL_HOST_PASSWORD = '6c76198e89b737'\n#EMAIL_PORT = '2525'\nCKEDITOR_UPLOAD_PATH = 'uploads/'\nCKEDITOR_IMAGE_BACKEND = 'pillow'\nCKEDITOR_BROWSE_SHOW_DIRS = True\nCKEDITOR_ALLOW_SYMLINKED_FILES = True",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import #EMAIL_HOST\n```\n\n```python\n\n\n```\n\n```python\n#EMAIL_HOST = 'sandbox.smtp.mailtrap.io'\n#EMAIL_HOST_USER = 'cc69e4cc4662f1'\n#EMAIL_HOST_PASSWORD = '6c76198e89b737'\n#EMAIL_PORT = '2525'\nCKEDITOR_UPLOAD_PATH = 'uploads/'\nCKEDITOR_IMAGE_BACKEND = 'pillow'\nCKEDITOR_BROWSE_SHOW_DIRS = True\nCKEDITOR_ALLOW_SYMLINKED_FILES = True\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#EMAIL_HOST_USER",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "#EMAIL_HOST_USER = 'cc69e4cc4662f1'\n#EMAIL_HOST_PASSWORD = '6c76198e89b737'\n#EMAIL_PORT = '2525'\nCKEDITOR_UPLOAD_PATH = 'uploads/'\nCKEDITOR_IMAGE_BACKEND = 'pillow'\nCKEDITOR_BROWSE_SHOW_DIRS = True\nCKEDITOR_ALLOW_SYMLINKED_FILES = True",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import #EMAIL_HOST_USER\n```\n\n```python\n\n\n```\n\n```python\n#EMAIL_HOST_USER = 'cc69e4cc4662f1'\n#EMAIL_HOST_PASSWORD = '6c76198e89b737'\n#EMAIL_PORT = '2525'\nCKEDITOR_UPLOAD_PATH = 'uploads/'\nCKEDITOR_IMAGE_BACKEND = 'pillow'\nCKEDITOR_BROWSE_SHOW_DIRS = True\nCKEDITOR_ALLOW_SYMLINKED_FILES = True\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#EMAIL_HOST_PASSWORD",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "#EMAIL_HOST_PASSWORD = '6c76198e89b737'\n#EMAIL_PORT = '2525'\nCKEDITOR_UPLOAD_PATH = 'uploads/'\nCKEDITOR_IMAGE_BACKEND = 'pillow'\nCKEDITOR_BROWSE_SHOW_DIRS = True\nCKEDITOR_ALLOW_SYMLINKED_FILES = True",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import #EMAIL_HOST_PASSWORD\n```\n\n```python\n\n\n```\n\n```python\n#EMAIL_HOST_PASSWORD = '6c76198e89b737'\n#EMAIL_PORT = '2525'\nCKEDITOR_UPLOAD_PATH = 'uploads/'\nCKEDITOR_IMAGE_BACKEND = 'pillow'\nCKEDITOR_BROWSE_SHOW_DIRS = True\nCKEDITOR_ALLOW_SYMLINKED_FILES = True\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "#EMAIL_PORT",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "#EMAIL_PORT = '2525'\nCKEDITOR_UPLOAD_PATH = 'uploads/'\nCKEDITOR_IMAGE_BACKEND = 'pillow'\nCKEDITOR_BROWSE_SHOW_DIRS = True\nCKEDITOR_ALLOW_SYMLINKED_FILES = True",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import #EMAIL_PORT\n```\n\n```python\n\n\n```\n\n```python\n#EMAIL_PORT = '2525'\nCKEDITOR_UPLOAD_PATH = 'uploads/'\nCKEDITOR_IMAGE_BACKEND = 'pillow'\nCKEDITOR_BROWSE_SHOW_DIRS = True\nCKEDITOR_ALLOW_SYMLINKED_FILES = True\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CKEDITOR_UPLOAD_PATH",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "CKEDITOR_UPLOAD_PATH = 'uploads/'\nCKEDITOR_IMAGE_BACKEND = 'pillow'\nCKEDITOR_BROWSE_SHOW_DIRS = True\nCKEDITOR_ALLOW_SYMLINKED_FILES = True",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import CKEDITOR_UPLOAD_PATH\n```\n\n```python\n\n\n```\n\n```python\nCKEDITOR_UPLOAD_PATH = 'uploads/'\nCKEDITOR_IMAGE_BACKEND = 'pillow'\nCKEDITOR_BROWSE_SHOW_DIRS = True\nCKEDITOR_ALLOW_SYMLINKED_FILES = True\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CKEDITOR_IMAGE_BACKEND",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "CKEDITOR_IMAGE_BACKEND = 'pillow'\nCKEDITOR_BROWSE_SHOW_DIRS = True\nCKEDITOR_ALLOW_SYMLINKED_FILES = True",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import CKEDITOR_IMAGE_BACKEND\n```\n\n```python\n\n\n```\n\n```python\nCKEDITOR_IMAGE_BACKEND = 'pillow'\nCKEDITOR_BROWSE_SHOW_DIRS = True\nCKEDITOR_ALLOW_SYMLINKED_FILES = True\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CKEDITOR_BROWSE_SHOW_DIRS",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "CKEDITOR_BROWSE_SHOW_DIRS = True\nCKEDITOR_ALLOW_SYMLINKED_FILES = True",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import CKEDITOR_BROWSE_SHOW_DIRS\n```\n\n```python\n\n\n```\n\n```python\nCKEDITOR_BROWSE_SHOW_DIRS = True\nCKEDITOR_ALLOW_SYMLINKED_FILES = True\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "CKEDITOR_ALLOW_SYMLINKED_FILES",
        "kind": 5,
        "importPath": "newspaper.settings",
        "description": "newspaper.settings",
        "peekOfCode": "CKEDITOR_ALLOW_SYMLINKED_FILES = True",
        "detail": "newspaper.settings",
        "documentation": {
            "value": "\n```python\nfrom newspaper.settings import CKEDITOR_ALLOW_SYMLINKED_FILES\n```\n\n```python\n\n\n```\n\n```python\nCKEDITOR_ALLOW_SYMLINKED_FILES = True\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "newspaper.urls",
        "description": "newspaper.urls",
        "peekOfCode": "urlpatterns = [\n    path('', include('news.urls')),\n    path('admin/', admin.site.urls),\n    path('ckeditor/', include('ckeditor_uploader.urls')),\n    path('registration/', include('users.urls')),\n    path('subscription/', include('newsletter.urls')),\n]\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)",
        "detail": "newspaper.urls",
        "documentation": {
            "value": "\n```python\nfrom newspaper.urls import urlpatterns\n```\n\n```python\n\n\n```\n\n```python\nurlpatterns = [\n    path('', include('news.urls')),\n    path('admin/', admin.site.urls),\n    path('ckeditor/', include('ckeditor_uploader.urls')),\n    path('registration/', include('users.urls')),\n    path('subscription/', include('newsletter.urls')),\n]\nif settings.DEBUG:\n    urlpatterns += static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)\n    urlpatterns += static(settings.STATIC_URL, document_root=settings.STATIC_ROOT)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "newspaper.wsgi",
        "description": "newspaper.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "newspaper.wsgi",
        "documentation": {
            "value": "\n```python\nfrom newspaper.wsgi import application\n```\n\n```python\n\n\n```\n\n```python\napplication = get_wsgi_application()\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "users.migrations.0001_initial",
        "description": "users.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('password', models.CharField(max_length=128, verbose_name='password')),\n                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),",
        "detail": "users.migrations.0001_initial",
        "documentation": {
            "value": "\n```python\nfrom users.migrations.0001_initial import Migration\n```\n\n```python\n\n\n```\n\n```python\nclass Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='User',\n            fields=[\n                ('password', models.CharField(max_length=128, verbose_name='password')),\n                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "users.migrations.0002_user_groups_user_user_permissions",
        "description": "users.migrations.0002_user_groups_user_user_permissions",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n        ('users', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='user',\n            name='groups',\n            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),",
        "detail": "users.migrations.0002_user_groups_user_user_permissions",
        "documentation": {
            "value": "\n```python\nfrom users.migrations.0002_user_groups_user_user_permissions import Migration\n```\n\n```python\n\n\n```\n\n```python\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('auth', '0012_alter_user_first_name_max_length'),\n        ('users', '0001_initial'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='user',\n            name='groups',\n            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "users.migrations.0003_alter_user_about",
        "description": "users.migrations.0003_alter_user_about",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('users', '0002_user_groups_user_user_permissions'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='about',\n            field=ckeditor.fields.RichTextField(blank=True, null=True),\n        ),",
        "detail": "users.migrations.0003_alter_user_about",
        "documentation": {
            "value": "\n```python\nfrom users.migrations.0003_alter_user_about import Migration\n```\n\n```python\n\n\n```\n\n```python\nclass Migration(migrations.Migration):\n    dependencies = [\n        ('users', '0002_user_groups_user_user_permissions'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='user',\n            name='about',\n            field=ckeditor.fields.RichTextField(blank=True, null=True),\n        ),\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "UserAdmin",
        "kind": 6,
        "importPath": "users.admin",
        "description": "users.admin",
        "peekOfCode": "class UserAdmin(admin.ModelAdmin):\n    list_display = ['username', 'email', 'first_name', 'last_name', 'is_active', 'is_superuser']\n    list_filter = ['username', 'email', 'first_name']",
        "detail": "users.admin",
        "documentation": {
            "value": "\n```python\nfrom users.admin import UserAdmin\n```\n\n```python\n\n\n```\n\n```python\nclass UserAdmin(admin.ModelAdmin):\n    list_display = ['username', 'email', 'first_name', 'last_name', 'is_active', 'is_superuser']\n    list_filter = ['username', 'email', 'first_name']\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "UsersConfig",
        "kind": 6,
        "importPath": "users.apps",
        "description": "users.apps",
        "peekOfCode": "class UsersConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'users'",
        "detail": "users.apps",
        "documentation": {
            "value": "\n```python\nfrom users.apps import UsersConfig\n```\n\n```python\n\n\n```\n\n```python\nclass UsersConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'users'\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "LoginForm",
        "kind": 6,
        "importPath": "users.forms",
        "description": "users.forms",
        "peekOfCode": "class LoginForm(forms.Form):\n    email = forms.EmailField(label='Enter Your Email', widget=forms.EmailInput)\n    password = forms.CharField(label='Enter Your Password', widget=forms.PasswordInput)\nclass UserRegistrationForm(forms.ModelForm):\n    password = forms.CharField(label='Password', widget=forms.PasswordInput)\n    password2 = forms.CharField(label='Repeat Password', widget=forms.PasswordInput)\n    class Meta:\n        model = User\n        fields = ['username', 'email', 'about', 'image', 'first_name', 'last_name']\n    def clean_password2(self):",
        "detail": "users.forms",
        "documentation": {
            "value": "\n```python\nfrom users.forms import LoginForm\n```\n\n```python\n\n\n```\n\n```python\nclass LoginForm(forms.Form):\n    email = forms.EmailField(label='Enter Your Email', widget=forms.EmailInput)\n    password = forms.CharField(label='Enter Your Password', widget=forms.PasswordInput)\nclass UserRegistrationForm(forms.ModelForm):\n    password = forms.CharField(label='Password', widget=forms.PasswordInput)\n    password2 = forms.CharField(label='Repeat Password', widget=forms.PasswordInput)\n    class Meta:\n        model = User\n        fields = ['username', 'email', 'about', 'image', 'first_name', 'last_name']\n    def clean_password2(self):\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "UserRegistrationForm",
        "kind": 6,
        "importPath": "users.forms",
        "description": "users.forms",
        "peekOfCode": "class UserRegistrationForm(forms.ModelForm):\n    password = forms.CharField(label='Password', widget=forms.PasswordInput)\n    password2 = forms.CharField(label='Repeat Password', widget=forms.PasswordInput)\n    class Meta:\n        model = User\n        fields = ['username', 'email', 'about', 'image', 'first_name', 'last_name']\n    def clean_password2(self):\n        cd = self.cleaned_data\n        if cd['password'] != cd['password2']:\n            raise forms.ValidationError('Password don\\'t match.')",
        "detail": "users.forms",
        "documentation": {
            "value": "\n```python\nfrom users.forms import UserRegistrationForm\n```\n\n```python\n\n\n```\n\n```python\nclass UserRegistrationForm(forms.ModelForm):\n    password = forms.CharField(label='Password', widget=forms.PasswordInput)\n    password2 = forms.CharField(label='Repeat Password', widget=forms.PasswordInput)\n    class Meta:\n        model = User\n        fields = ['username', 'email', 'about', 'image', 'first_name', 'last_name']\n    def clean_password2(self):\n        cd = self.cleaned_data\n        if cd['password'] != cd['password2']:\n            raise forms.ValidationError('Password don\\'t match.')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "UserManager",
        "kind": 6,
        "importPath": "users.models",
        "description": "users.models",
        "peekOfCode": "class UserManager(BaseUserManager):\n    def create_user(self, username, email, password, **kwargs):\n        if username is None:\n            raise ValidationError(\"User Must Have A Password\")\n        if email is None:\n            raise ValidationError(\"User Must Have An Email\")\n        if password is None:\n            raise ValidationError(\"User Must Have A Password\")\n        user = self.model(username=username, email=self.normalize_email(email), **kwargs)\n        user.set_password(password)",
        "detail": "users.models",
        "documentation": {
            "value": "\n```python\nfrom users.models import UserManager\n```\n\n```python\n\n\n```\n\n```python\nclass UserManager(BaseUserManager):\n    def create_user(self, username, email, password, **kwargs):\n        if username is None:\n            raise ValidationError(\"User Must Have A Password\")\n        if email is None:\n            raise ValidationError(\"User Must Have An Email\")\n        if password is None:\n            raise ValidationError(\"User Must Have A Password\")\n        user = self.model(username=username, email=self.normalize_email(email), **kwargs)\n        user.set_password(password)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "users.models",
        "description": "users.models",
        "peekOfCode": "class User(AbstractBaseUser, PermissionsMixin):\n    public_id = models.UUIDField(blank=False, primary_key=True, unique=True, editable=False, default=uuid.uuid4)\n    username = models.CharField(unique=True, db_index=True)\n    first_name = models.CharField(max_length=256)\n    last_name = models.CharField(max_length=256)\n    email = models.EmailField(unique=True, db_index=True)\n    about = RichTextField(blank=True, null=True)\n    image = models.ImageField(upload_to='users_images')\n    created = models.DateTimeField(auto_now=True)\n    updated = models.DateTimeField(auto_now_add=True)",
        "detail": "users.models",
        "documentation": {
            "value": "\n```python\nfrom users.models import User\n```\n\n```python\n\n\n```\n\n```python\nclass User(AbstractBaseUser, PermissionsMixin):\n    public_id = models.UUIDField(blank=False, primary_key=True, unique=True, editable=False, default=uuid.uuid4)\n    username = models.CharField(unique=True, db_index=True)\n    first_name = models.CharField(max_length=256)\n    last_name = models.CharField(max_length=256)\n    email = models.EmailField(unique=True, db_index=True)\n    about = RichTextField(blank=True, null=True)\n    image = models.ImageField(upload_to='users_images')\n    created = models.DateTimeField(auto_now=True)\n    updated = models.DateTimeField(auto_now_add=True)\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "users.urls",
        "description": "users.urls",
        "peekOfCode": "urlpatterns = [\n    path('register/', views.register, name='register'),\n    path('login/', views.users_login, name='login'),\n    path('logout/', views.logout_view, name='logout'),\n]",
        "detail": "users.urls",
        "documentation": {
            "value": "\n```python\nfrom users.urls import urlpatterns\n```\n\n```python\n\n\n```\n\n```python\nurlpatterns = [\n    path('register/', views.register, name='register'),\n    path('login/', views.users_login, name='login'),\n    path('logout/', views.logout_view, name='logout'),\n]\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "def register(request):\n    if request.method == 'POST':\n        user_form = UserRegistrationForm(request.POST, request.FILES)\n        if user_form.is_valid():\n            cd = user_form.cleaned_data\n            new_user = user_form.save(commit=False)\n            new_user.set_password(cd['password'])\n            new_user.save()\n            messages.success(request, 'ACCOUNT CREATED SUCCESFULLY NOW LOGIN')\n            return redirect('login')",
        "detail": "users.views",
        "documentation": {
            "value": "\n```python\nfrom users.views import register\n```\n\n```python\n\n\n```\n\n```python\ndef register(request):\n    if request.method == 'POST':\n        user_form = UserRegistrationForm(request.POST, request.FILES)\n        if user_form.is_valid():\n            cd = user_form.cleaned_data\n            new_user = user_form.save(commit=False)\n            new_user.set_password(cd['password'])\n            new_user.save()\n            messages.success(request, 'ACCOUNT CREATED SUCCESFULLY NOW LOGIN')\n            return redirect('login')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "users_login",
        "kind": 2,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "def users_login(request):\n    if request.method == 'POST':\n        form = LoginForm(request.POST)\n        if form.is_valid():\n            cd = form.cleaned_data\n            user = authenticate(request, email=cd['email'], password=cd['password'])\n            if user is not None:\n                if user.is_active:\n                    login(request, user)\n                    messages.success(request, 'LOGGED IN SUCCESFULLY')",
        "detail": "users.views",
        "documentation": {
            "value": "\n```python\nfrom users.views import users_login\n```\n\n```python\n\n\n```\n\n```python\ndef users_login(request):\n    if request.method == 'POST':\n        form = LoginForm(request.POST)\n        if form.is_valid():\n            cd = form.cleaned_data\n            user = authenticate(request, email=cd['email'], password=cd['password'])\n            if user is not None:\n                if user.is_active:\n                    login(request, user)\n                    messages.success(request, 'LOGGED IN SUCCESFULLY')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "logout_view",
        "kind": 2,
        "importPath": "users.views",
        "description": "users.views",
        "peekOfCode": "def logout_view(request):\n    logout(request)\n    return redirect('login')",
        "detail": "users.views",
        "documentation": {
            "value": "\n```python\nfrom users.views import logout_view\n```\n\n```python\n\n\n```\n\n```python\ndef logout_view(request):\n    logout(request)\n    return redirect('login')\n```\n",
            "supportThemeIcons": false
        }
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'newspaper.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {
            "value": "\n```python\nfrom manage import main\n```\n\n```python\n\n\n```\n\n```python\ndef main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'newspaper.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"\n```\n",
            "supportThemeIcons": false
        }
    }
]